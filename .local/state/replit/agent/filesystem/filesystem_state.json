{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Kenya Harvest Hub\n\n## Overview\n\nKenya Harvest Hub is a B2C SaaS platform that connects Kenyan farmers directly with consumers, promoting fair prices, reducing intermediaries, and increasing market access. The platform enables farmers to list their products and manage their farming business while providing consumers with access to fresh, local produce through an intuitive marketplace interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React with TypeScript, utilizing modern React patterns and hooks. The application uses Wouter for client-side routing, providing a lightweight alternative to React Router. State management is handled through React Query (@tanstack/react-query) for server state and React's built-in state management for local UI state.\n\n**UI Framework**: The application uses shadcn/ui components built on top of Radix UI primitives, providing accessible and customizable components. Styling is implemented with Tailwind CSS using a custom design system with CSS variables for theming.\n\n**Build System**: Vite is used as the build tool and development server, providing fast hot module replacement and optimized builds. The configuration includes support for TypeScript, React, and development-specific plugins for the Replit environment.\n\n### Backend Architecture\nThe backend follows an Express.js architecture with TypeScript, implementing a RESTful API pattern. The server is structured with modular route handling and middleware for cross-cutting concerns like authentication and logging.\n\n**API Design**: Routes are organized by domain (auth, products, farmers, cart, orders, etc.) with consistent REST conventions. The API includes comprehensive error handling and request/response logging middleware.\n\n**Authentication**: The system uses Replit's OpenID Connect (OIDC) authentication with Passport.js strategy. Session management is handled through express-session with PostgreSQL storage, providing secure user authentication and authorization.\n\n### Data Storage Solutions\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The database schema is defined using Drizzle's schema definition with proper relationships and constraints.\n\n**Database Schema**: Core entities include users, farmers, products, categories, orders, cart items, and reviews. The schema supports role-based access control with user roles (consumer, farmer, admin) and maintains referential integrity through foreign key relationships.\n\n**Connection Management**: Database connections are managed through Neon's serverless PostgreSQL with connection pooling for optimal performance.\n\n### Authentication and Authorization\n**Session Management**: Uses PostgreSQL-backed sessions with configurable TTL and secure cookie settings. Session data includes user claims and role information for authorization decisions.\n\n**Role-Based Access**: Three primary user roles (consumer, farmer, admin) with different access levels and dashboard views. Middleware functions protect routes based on authentication status and user roles.\n\n**Security**: Implements secure session configuration with httpOnly cookies, CSRF protection, and proper error handling for unauthorized access attempts.\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting with WebSocket support for real-time connections\n- **Drizzle ORM**: Type-safe ORM with migration support and schema validation\n\n### Authentication Services\n- **Replit Auth**: OpenID Connect authentication provider integrated with Replit's user system\n- **Passport.js**: Authentication middleware for handling OIDC strategy and session management\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI components\n- **Tailwind CSS**: Utility-first CSS framework for styling with custom design tokens\n- **Lucide React**: Icon library providing consistent iconography\n\n### Development and Build Tools\n- **Vite**: Build tool and development server with TypeScript and React support\n- **React Query**: Server state management with caching, synchronization, and error handling\n- **React Hook Form**: Form library with validation using Zod schemas\n\n### Payment Integration (Planned)\n- **M-Pesa API**: Mobile payment integration for Kenyan market\n- **Card Payment Processors**: Support for credit/debit card transactions\n\n### Logistics and Delivery (Planned)\n- **Third-party Logistics APIs**: Integration with local delivery services for order fulfillment\n- **Geolocation Services**: For delivery address validation and route optimization","size_bytes":4716},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          dark: \"var(--primary-dark)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          dark: \"var(--secondary-dark)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"earth-brown\": \"var(--earth-brown)\",\n        \"earth-beige\": \"var(--earth-beige)\",\n        \"neutral-warm\": \"var(--neutral-warm)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2983},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertFarmerSchema, \n  insertProductSchema, \n  insertCartItemSchema, \n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertReviewSchema,\n  insertCategorySchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Check if user is a farmer\n      const farmer = await storage.getFarmerByUserId(userId);\n      \n      res.json({ ...user, farmer });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Update user role\n  app.patch('/api/auth/user/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { role } = req.body;\n      \n      if (!['consumer', 'farmer', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      const updatedUser = await storage.upsertUser({ role });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Categories\n  app.get('/api/categories', async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Farmers\n  app.get('/api/farmers', async (req, res) => {\n    try {\n      const farmers = await storage.getFarmers();\n      res.json(farmers);\n    } catch (error) {\n      console.error(\"Error fetching farmers:\", error);\n      res.status(500).json({ message: \"Failed to fetch farmers\" });\n    }\n  });\n\n  app.get('/api/farmers/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const farmer = await storage.getFarmer(id);\n      \n      if (!farmer) {\n        return res.status(404).json({ message: \"Farmer not found\" });\n      }\n      \n      res.json(farmer);\n    } catch (error) {\n      console.error(\"Error fetching farmer:\", error);\n      res.status(500).json({ message: \"Failed to fetch farmer\" });\n    }\n  });\n\n  app.post('/api/farmers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmerData = insertFarmerSchema.parse({ ...req.body, userId });\n      \n      const farmer = await storage.createFarmer(farmerData);\n      \n      // Update user role to farmer\n      await storage.upsertUser({ role: 'farmer' });\n      \n      res.status(201).json(farmer);\n    } catch (error) {\n      console.error(\"Error creating farmer profile:\", error);\n      res.status(500).json({ message: \"Failed to create farmer profile\" });\n    }\n  });\n\n  app.patch('/api/farmers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmerId = parseInt(req.params.id);\n      \n      const farmer = await storage.getFarmer(farmerId);\n      if (!farmer || farmer.userId !== userId) {\n        return res.status(404).json({ message: \"Farmer not found or unauthorized\" });\n      }\n      \n      const updateData = insertFarmerSchema.partial().parse(req.body);\n      const updatedFarmer = await storage.updateFarmer(farmerId, updateData);\n      \n      res.json(updatedFarmer);\n    } catch (error) {\n      console.error(\"Error updating farmer:\", error);\n      res.status(500).json({ message: \"Failed to update farmer\" });\n    }\n  });\n\n  // Products\n  app.get('/api/products', async (req, res) => {\n    try {\n      const { categoryId, farmerId, search } = req.query;\n      \n      const filters = {\n        categoryId: categoryId ? parseInt(categoryId as string) : undefined,\n        farmerId: farmerId ? parseInt(farmerId as string) : undefined,\n        search: search as string,\n      };\n      \n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid product ID\" });\n      }\n      \n      const product = await storage.getProduct(id);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const farmer = await storage.getFarmerByUserId(userId);\n      \n      if (!farmer) {\n        return res.status(403).json({ message: \"Farmer profile required\" });\n      }\n      \n      const productData = insertProductSchema.parse({ ...req.body, farmerId: farmer.id });\n      const product = await storage.createProduct(productData);\n      \n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.patch('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const productId = parseInt(req.params.id);\n      \n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const farmer = await storage.getFarmer(product.farmerId);\n      if (!farmer || farmer.userId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const updateData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(productId, updateData);\n      \n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const productId = parseInt(req.params.id);\n      \n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const farmer = await storage.getFarmer(product.farmerId);\n      if (!farmer || farmer.userId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      await storage.deleteProduct(productId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Cart\n  app.get('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cartItems = await storage.getCartItems(userId);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cartItemData = insertCartItemSchema.parse({ ...req.body, userId });\n      \n      const cartItem = await storage.addToCart(cartItemData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.patch('/api/cart/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const cartItemId = parseInt(req.params.id);\n      const { quantity } = req.body;\n      \n      if (!quantity || quantity < 1) {\n        return res.status(400).json({ message: \"Invalid quantity\" });\n      }\n      \n      const updatedItem = await storage.updateCartItem(cartItemId, quantity);\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete('/api/cart/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const cartItemId = parseInt(req.params.id);\n      await storage.removeFromCart(cartItemId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete('/api/cart', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.clearCart(userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Orders\n  app.get('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      let orders;\n      if (user?.role === 'farmer') {\n        const farmer = await storage.getFarmerByUserId(userId);\n        orders = farmer ? await storage.getOrders(undefined, farmer.id) : [];\n      } else {\n        orders = await storage.getOrders(userId);\n      }\n      \n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get('/api/orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const orderId = parseInt(req.params.id);\n      const order = await storage.getOrder(orderId);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      const orderItems = await storage.getOrderItems(orderId);\n      res.json({ ...order, items: orderItems });\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const orderData = insertOrderSchema.parse({ ...req.body, userId });\n      \n      const order = await storage.createOrder(orderData);\n      \n      // Create order items from cart\n      const cartItems = await storage.getCartItems(userId);\n      \n      for (const item of cartItems) {\n        const product = await storage.getProduct(item.productId);\n        if (product) {\n          await storage.createOrderItem({\n            orderId: order.id,\n            productId: item.productId,\n            farmerId: product.farmerId,\n            quantity: item.quantity,\n            unitPrice: product.price,\n            totalPrice: String(parseFloat(product.price) * item.quantity),\n          });\n        }\n      }\n      \n      // Clear cart after creating order\n      await storage.clearCart(userId);\n      \n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.patch('/api/orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const orderId = parseInt(req.params.id);\n      const updateData = insertOrderSchema.partial().parse(req.body);\n      \n      const updatedOrder = await storage.updateOrder(orderId, updateData);\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Reviews\n  app.get('/api/reviews', async (req, res) => {\n    try {\n      const { productId, farmerId } = req.query;\n      \n      const reviews = await storage.getReviews(\n        productId ? parseInt(productId as string) : undefined,\n        farmerId ? parseInt(farmerId as string) : undefined\n      );\n      \n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const reviewData = insertReviewSchema.parse({ ...req.body, userId });\n      \n      const review = await storage.createReview(reviewData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Mock M-Pesa payment endpoint\n  app.post('/api/payments/mpesa', isAuthenticated, async (req: any, res) => {\n    try {\n      const { amount, phoneNumber, orderId } = req.body;\n      \n      if (!amount || !phoneNumber || !orderId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      // Mock M-Pesa payment processing\n      const paymentReference = `MP${Date.now()}${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Simulate payment processing delay\n      setTimeout(async () => {\n        try {\n          // Update order payment status\n          await storage.updateOrder(orderId, {\n            paymentStatus: 'paid',\n            paymentMethod: 'mpesa',\n            paymentReference,\n            status: 'confirmed',\n          });\n        } catch (error) {\n          console.error(\"Error updating order payment:\", error);\n        }\n      }, 2000);\n      \n      res.json({\n        success: true,\n        paymentReference,\n        message: 'Payment initiated successfully',\n      });\n    } catch (error) {\n      console.error(\"Error processing M-Pesa payment:\", error);\n      res.status(500).json({ message: \"Failed to process payment\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15391},"server/storage.ts":{"content":"import {\n  users,\n  farmers,\n  categories,\n  products,\n  cartItems,\n  orders,\n  orderItems,\n  reviews,\n  type User,\n  type UpsertUser,\n  type Farmer,\n  type InsertFarmer,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type CartItem,\n  type InsertCartItem,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Review,\n  type InsertReview,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Farmer operations\n  getFarmer(id: number): Promise<Farmer | undefined>;\n  getFarmerByUserId(userId: string): Promise<Farmer | undefined>;\n  createFarmer(farmer: InsertFarmer): Promise<Farmer>;\n  updateFarmer(id: number, farmer: Partial<InsertFarmer>): Promise<Farmer>;\n  getFarmers(): Promise<Farmer[]>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Product operations\n  getProduct(id: number): Promise<Product | undefined>;\n  getProducts(filters?: { categoryId?: number; farmerId?: number; search?: string }): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: number): Promise<void>;\n  \n  // Cart operations\n  getCartItems(userId: string): Promise<CartItem[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: number, quantity: number): Promise<CartItem>;\n  removeFromCart(id: number): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n  \n  // Order operations\n  getOrder(id: number): Promise<Order | undefined>;\n  getOrders(userId?: string, farmerId?: number): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order>;\n  getOrderItems(orderId: number): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  \n  // Review operations\n  getReviews(productId?: number, farmerId?: number): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Farmer operations\n  async getFarmer(id: number): Promise<Farmer | undefined> {\n    const [farmer] = await db.select().from(farmers).where(eq(farmers.id, id));\n    return farmer;\n  }\n\n  async getFarmerByUserId(userId: string): Promise<Farmer | undefined> {\n    const [farmer] = await db.select().from(farmers).where(eq(farmers.userId, userId));\n    return farmer;\n  }\n\n  async createFarmer(farmer: InsertFarmer): Promise<Farmer> {\n    const [newFarmer] = await db.insert(farmers).values(farmer).returning();\n    return newFarmer;\n  }\n\n  async updateFarmer(id: number, farmer: Partial<InsertFarmer>): Promise<Farmer> {\n    const [updatedFarmer] = await db\n      .update(farmers)\n      .set({ ...farmer, updatedAt: new Date() })\n      .where(eq(farmers.id, id))\n      .returning();\n    return updatedFarmer;\n  }\n\n  async getFarmers(): Promise<Farmer[]> {\n    return await db.select().from(farmers).orderBy(desc(farmers.rating));\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(asc(categories.name));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Product operations\n  async getProduct(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async getProducts(filters?: { categoryId?: number; farmerId?: number; search?: string }): Promise<Product[]> {\n    const conditions = [eq(products.isActive, true)];\n    \n    if (filters?.categoryId) {\n      conditions.push(eq(products.categoryId, filters.categoryId));\n    }\n    \n    if (filters?.farmerId) {\n      conditions.push(eq(products.farmerId, filters.farmerId));\n    }\n    \n    if (filters?.search) {\n      conditions.push(\n        or(\n          ilike(products.name, `%${filters.search}%`),\n          ilike(products.description!, `%${filters.search}%`)\n        )\n      );\n    }\n    \n    return await db.select().from(products).where(conditions.length > 0 ? and(...conditions) : undefined).orderBy(desc(products.createdAt));\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<CartItem[]> {\n    return await db.select().from(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const [existingItem] = await db\n      .select()\n      .from(cartItems)\n      .where(\n        and(\n          eq(cartItems.userId, cartItem.userId),\n          eq(cartItems.productId, cartItem.productId)\n        )\n      );\n\n    if (existingItem) {\n      // Update quantity\n      const [updatedItem] = await db\n        .update(cartItems)\n        .set({ quantity: existingItem.quantity + (cartItem.quantity || 1) })\n        .where(eq(cartItems.id, existingItem.id))\n        .returning();\n      return updatedItem;\n    } else {\n      // Create new cart item\n      const [newItem] = await db.insert(cartItems).values(cartItem).returning();\n      return newItem;\n    }\n  }\n\n  async updateCartItem(id: number, quantity: number): Promise<CartItem> {\n    const [updatedItem] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async removeFromCart(id: number): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.id, id));\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  // Order operations\n  async getOrder(id: number): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async getOrders(userId?: string, farmerId?: number): Promise<Order[]> {\n    let query = db.select().from(orders);\n    \n    if (userId) {\n      query = query.where(eq(orders.userId, userId));\n    }\n    \n    if (farmerId) {\n      // Get orders that contain products from this farmer\n      query = query\n        .innerJoin(orderItems, eq(orders.id, orderItems.orderId))\n        .where(eq(orderItems.farmerId, farmerId));\n    }\n    \n    return await query.orderBy(desc(orders.createdAt));\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ ...order, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async getOrderItems(orderId: number): Promise<OrderItem[]> {\n    return await db.select().from(orderItems).where(eq(orderItems.orderId, orderId));\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const [newOrderItem] = await db.insert(orderItems).values(orderItem).returning();\n    return newOrderItem;\n  }\n\n  // Review operations\n  async getReviews(productId?: number, farmerId?: number): Promise<Review[]> {\n    let query = db.select().from(reviews);\n    \n    if (productId) {\n      query = query.where(eq(reviews.productId, productId));\n    }\n    \n    if (farmerId) {\n      query = query.where(eq(reviews.farmerId, farmerId));\n    }\n    \n    return await query.orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    return newReview;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9204},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"consumer\"), // consumer, farmer, admin\n  phone: varchar(\"phone\"),\n  location: varchar(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Farmer profiles\nexport const farmers = pgTable(\"farmers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  farmName: varchar(\"farm_name\").notNull(),\n  description: text(\"description\"),\n  county: varchar(\"county\").notNull(),\n  subCounty: varchar(\"sub_county\"),\n  experience: integer(\"experience_years\"),\n  verified: boolean(\"verified\").default(false),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalReviews: integer(\"total_reviews\").default(0),\n  specializations: text(\"specializations\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product categories\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  farmerId: integer(\"farmer_id\").notNull().references(() => farmers.id),\n  categoryId: integer(\"category_id\").notNull().references(() => categories.id),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  unit: varchar(\"unit\").notNull(), // kg, piece, bunch, etc.\n  stock: integer(\"stock\").notNull().default(0),\n  images: text(\"images\").array().default([]),\n  isOrganic: boolean(\"is_organic\").default(false),\n  harvestDate: timestamp(\"harvest_date\"),\n  expiryDate: timestamp(\"expiry_date\"),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalReviews: integer(\"total_reviews\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Shopping cart\nexport const cartItems = pgTable(\"cart_items\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: integer(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Orders\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, confirmed, shipped, delivered, cancelled\n  paymentStatus: varchar(\"payment_status\").notNull().default(\"pending\"), // pending, paid, failed\n  paymentMethod: varchar(\"payment_method\"), // mpesa, card, etc.\n  paymentReference: varchar(\"payment_reference\"),\n  deliveryAddress: text(\"delivery_address\"),\n  deliveryPhone: varchar(\"delivery_phone\"),\n  deliveryInstructions: text(\"delivery_instructions\"),\n  estimatedDelivery: timestamp(\"estimated_delivery\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items\nexport const orderItems = pgTable(\"order_items\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").notNull().references(() => orders.id),\n  productId: integer(\"product_id\").notNull().references(() => products.id),\n  farmerId: integer(\"farmer_id\").notNull().references(() => farmers.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Reviews\nexport const reviews = pgTable(\"reviews\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  farmerId: integer(\"farmer_id\").references(() => farmers.id),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  farmer: one(farmers, {\n    fields: [users.id],\n    references: [farmers.userId],\n  }),\n  cartItems: many(cartItems),\n  orders: many(orders),\n  reviews: many(reviews),\n}));\n\nexport const farmersRelations = relations(farmers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [farmers.userId],\n    references: [users.id],\n  }),\n  products: many(products),\n  reviews: many(reviews),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  farmer: one(farmers, {\n    fields: [products.farmerId],\n    references: [farmers.id],\n  }),\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  cartItems: many(cartItems),\n  orderItems: many(orderItems),\n  reviews: many(reviews),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n  farmer: one(farmers, {\n    fields: [orderItems.farmerId],\n    references: [farmers.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [reviews.productId],\n    references: [products.id],\n  }),\n  farmer: one(farmers, {\n    fields: [reviews.farmerId],\n    references: [farmers.id],\n  }),\n  order: one(orders, {\n    fields: [reviews.orderId],\n    references: [orders.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFarmerSchema = createInsertSchema(farmers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Farmer = typeof farmers.$inferSelect;\nexport type InsertFarmer = z.infer<typeof insertFarmerSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n","size_bytes":9327},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport FarmerDashboard from \"@/pages/farmer-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Cart from \"@/pages/cart\";\nimport Checkout from \"@/pages/checkout\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/products/:id\" component={ProductDetail} />\n          <Route path=\"/cart\" component={Cart} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/products/:id\" component={ProductDetail} />\n          <Route path=\"/cart\" component={Cart} />\n          <Route path=\"/checkout\" component={Checkout} />\n          {(user as any)?.role === 'farmer' && (\n            <Route path=\"/farmer-dashboard\" component={FarmerDashboard} />\n          )}\n          {(user as any)?.role === 'admin' && (\n            <Route path=\"/admin-dashboard\" component={AdminDashboard} />\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2165},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(158.82 92.19% 19.41%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-dark: hsl(159.68 88.89% 17.25%);\n  --secondary: hsl(20.89 93.44% 48.43%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --secondary-dark: hsl(20.30 84.85% 38.82%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(158.82 92.19% 19.41%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(158.82 92.19% 19.41%);\n  --chart-1: hsl(158.82 92.19% 19.41%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(158.82 92.19% 19.41%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(158.82 92.19% 19.41%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(158.82 92.19% 19.41%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 1px 2px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 1px 2px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 2px 4px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 4px 6px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 8px 10px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  --earth-brown: hsl(38.14 87.27% 28.24%);\n  --earth-beige: hsl(48.00 85.71% 89.22%);\n  --neutral-warm: hsl(0 0% 99.61%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(158.82 92.19% 19.41%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-dark: hsl(159.68 88.89% 17.25%);\n  --secondary: hsl(20.89 93.44% 48.43%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --secondary-dark: hsl(20.30 84.85% 38.82%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(158.82 92.19% 19.41%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(158.82 92.19% 19.41%);\n  --chart-1: hsl(158.82 92.19% 19.41%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(158.82 92.19% 19.41%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(158.82 92.19% 19.41%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(158.82 92.19% 19.41%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 1px 2px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 1px 2px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 2px 4px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 4px 6px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00), 0px 8px 10px -1px hsl(158.82 92.19% 19.41% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(158.82 92.19% 19.41% / 0.00);\n  --earth-brown: hsl(38.14 87.27% 28.24%);\n  --earth-beige: hsl(48.00 85.71% 89.22%);\n  --neutral-warm: hsl(0 0% 99.61%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .bg-neutral-warm {\n    background-color: var(--neutral-warm);\n  }\n  \n  .bg-earth-brown {\n    background-color: var(--earth-brown);\n  }\n  \n  .bg-earth-beige {\n    background-color: var(--earth-beige);\n  }\n  \n  .text-earth-brown {\n    color: var(--earth-brown);\n  }\n  \n  .text-primary-dark {\n    color: var(--primary-dark);\n  }\n  \n  .text-secondary-dark {\n    color: var(--secondary-dark);\n  }\n  \n  .bg-primary-dark {\n    background-color: var(--primary-dark);\n  }\n  \n  .bg-secondary-dark {\n    background-color: var(--secondary-dark);\n  }\n  \n  .hover\\:bg-primary-dark:hover {\n    background-color: var(--primary-dark);\n  }\n  \n  .hover\\:bg-secondary-dark:hover {\n    background-color: var(--secondary-dark);\n  }\n}\n","size_bytes":5982},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport Navigation from \"@/components/ui/navigation\";\nimport FarmerCard from \"@/components/ui/farmer-card\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Users, \n  Package, \n  DollarSign, \n  TrendingUp,\n  ShoppingCart,\n  Plus,\n  Edit,\n  Trash2,\n  CheckCircle,\n  XCircle,\n  BarChart3\n} from \"lucide-react\";\n\nconst categorySchema = z.object({\n  name: z.string().min(1, \"Category name is required\"),\n  description: z.string().optional(),\n  icon: z.string().optional(),\n});\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n\n  useEffect(() => {\n    if (!user?.isLoading && user?.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You need admin access to view this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1500);\n    }\n  }, [user, toast]);\n\n  // Fetch data\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: user?.role === 'admin',\n  });\n\n  const { data: farmers = [] } = useQuery({\n    queryKey: [\"/api/farmers\"],\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/admin/orders\"],\n    enabled: user?.role === 'admin',\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Category Form\n  const categoryForm = useForm({\n    resolver: zodResolver(categorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      icon: \"\",\n    },\n  });\n\n  // Create/Update Category\n  const categoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingCategory) {\n        return await apiRequest(\"PATCH\", `/api/categories/${editingCategory.id}`, data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/categories\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: editingCategory ? \"Category updated\" : \"Category created\",\n        description: `Category has been ${editingCategory ? 'updated' : 'created'} successfully.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      categoryForm.reset();\n      setEditingCategory(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need admin access to manage categories.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingCategory ? 'update' : 'create'} category. Please try again.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete Category\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (categoryId: number) => {\n      await apiRequest(\"DELETE\", `/api/categories/${categoryId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Category deleted\",\n        description: \"Category has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCategorySubmit = (data: any) => {\n    categoryMutation.mutate(data);\n  };\n\n  const handleEditCategory = (category: any) => {\n    setEditingCategory(category);\n    categoryForm.setValue(\"name\", category.name);\n    categoryForm.setValue(\"description\", category.description || \"\");\n    categoryForm.setValue(\"icon\", category.icon || \"\");\n  };\n\n  const handleDeleteCategory = (categoryId: number) => {\n    if (confirm(\"Are you sure you want to delete this category?\")) {\n      deleteCategoryMutation.mutate(categoryId);\n    }\n  };\n\n  // Calculate stats\n  const totalRevenue = orders.reduce((sum: number, order: any) => sum + parseFloat(order.totalAmount), 0);\n  const totalOrders = orders.length;\n  const totalUsers = users.length;\n  const activeFarmers = farmers.filter((farmer: any) => farmer.verified).length;\n\n  if (user?.isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Admin Dashboard</h1>\n          <p className=\"text-gray-600\">\n            Manage the Kenya Harvest Hub platform\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n            <TabsTrigger value=\"farmers\" data-testid=\"tab-farmers\">Farmers</TabsTrigger>\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products</TabsTrigger>\n            <TabsTrigger value=\"categories\" data-testid=\"tab-categories\">Categories</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"mt-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">{totalUsers}</div>\n                  <p className=\"text-xs text-muted-foreground\">Registered users</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Farmers</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">{activeFarmers}</div>\n                  <p className=\"text-xs text-muted-foreground\">Verified farmers</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                  <Package className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-secondary\">{products.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">Listed products</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Platform Revenue</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-earth-brown\">KSh {totalRevenue.toFixed(0)}</div>\n                  <p className=\"text-xs text-muted-foreground\">{totalOrders} total orders</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Orders</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {orders.slice(0, 5).length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {orders.slice(0, 5).map((order: any) => (\n                        <div key={order.id} className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">Order #{order.id}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">KSh {parseFloat(order.totalAmount).toFixed(2)}</p>\n                            <Badge variant=\"outline\">{order.status}</Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-500\">No recent orders</p>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Products</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {products.slice(0, 5).length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {products.slice(0, 5).map((product: any) => (\n                        <div key={product.id} className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">{product.name}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {new Date(product.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">KSh {product.price}</p>\n                            <p className=\"text-sm text-gray-500\">{product.stock} in stock</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-500\">No recent products</p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Users ({totalUsers})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead>Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users.map((user: any) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          {user.firstName && user.lastName \n                            ? `${user.firstName} ${user.lastName}`\n                            : 'N/A'\n                          }\n                        </TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {user.role}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {new Date(user.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"default\">Active</Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"farmers\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Farmers ({farmers.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {farmers.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {farmers.map((farmer: any) => (\n                      <FarmerCard key={farmer.id} farmer={farmer} />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No farmers yet</h3>\n                    <p className=\"text-gray-600\">Farmers will appear here when they register.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"products\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Products ({products.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Product</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Stock</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {products.map((product: any) => (\n                      <TableRow key={product.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{product.name}</p>\n                            <p className=\"text-sm text-gray-500\">per {product.unit}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">Category</Badge>\n                        </TableCell>\n                        <TableCell>KSh {product.price}</TableCell>\n                        <TableCell>{product.stock}</TableCell>\n                        <TableCell>\n                          <Badge variant={product.isActive ? \"default\" : \"secondary\"}>\n                            {product.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"categories\" className=\"mt-6\">\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {/* Add/Edit Category Form */}\n              <Card className=\"lg:col-span-1\">\n                <CardHeader>\n                  <CardTitle>\n                    {editingCategory ? \"Edit Category\" : \"Add New Category\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Form {...categoryForm}>\n                    <form onSubmit={categoryForm.handleSubmit(onCategorySubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={categoryForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"category-name-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={categoryForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                {...field} \n                                rows={3}\n                                placeholder=\"Category description...\"\n                                data-testid=\"category-description-input\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={categoryForm.control}\n                        name=\"icon\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Icon (emoji)</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                placeholder=\"🍎\"\n                                data-testid=\"category-icon-input\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex gap-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={categoryMutation.isPending}\n                          data-testid=\"save-category-button\"\n                        >\n                          {categoryMutation.isPending \n                            ? \"Saving...\" \n                            : editingCategory \n                              ? \"Update Category\" \n                              : \"Add Category\"\n                          }\n                        </Button>\n                        \n                        {editingCategory && (\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              setEditingCategory(null);\n                              categoryForm.reset();\n                            }}\n                          >\n                            Cancel\n                          </Button>\n                        )}\n                      </div>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n\n              {/* Categories List */}\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Categories ({categories.length})</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {categories.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {categories.map((category: any) => (\n                          <div key={category.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center\">\n                                <span className=\"text-2xl\">{category.icon || '📦'}</span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-medium text-gray-900\">{category.name}</h3>\n                                <p className=\"text-sm text-gray-500\">{category.description}</p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => handleEditCategory(category)}\n                                data-testid={`edit-category-${category.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => handleDeleteCategory(category.id)}\n                                data-testid={`delete-category-${category.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No categories yet</h3>\n                        <p className=\"text-gray-600\">Add your first category to organize products.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":23681},"client/src/pages/cart.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/ui/navigation\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  ShoppingCart, \n  Plus, \n  Minus, \n  Trash2, \n  ArrowRight,\n  Package,\n  Heart\n} from \"lucide-react\";\n\nexport default function Cart() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const { data: cartItems = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: number; quantity: number }) => {\n      await apiRequest(\"PATCH\", `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to update cart items.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update cart item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Item removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to remove cart items.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/cart\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cart cleared\",\n        description: \"All items have been removed from your cart.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to clear your cart.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleQuantityChange = (id: number, currentQuantity: number, delta: number) => {\n    const newQuantity = currentQuantity + delta;\n    if (newQuantity > 0) {\n      updateQuantityMutation.mutate({ id, quantity: newQuantity });\n    }\n  };\n\n  const handleRemoveItem = (id: number) => {\n    removeItemMutation.mutate(id);\n  };\n\n  const handleClearCart = () => {\n    if (confirm(\"Are you sure you want to remove all items from your cart?\")) {\n      clearCartMutation.mutate();\n    }\n  };\n\n  // Calculate totals\n  const subtotal = cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product?.price || \"0\") * item.quantity);\n  }, 0);\n\n  const deliveryFee = subtotal > 1000 ? 0 : 100; // Free delivery over KSh 1000\n  const total = subtotal + deliveryFee;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-6\"></div>\n            <div className=\"space-y-4\">\n              {Array.from({ length: 3 }, (_, i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Shopping Cart</h1>\n          <p className=\"text-gray-600\">\n            {cartItems.length} item{cartItems.length !== 1 ? 's' : ''} in your cart\n          </p>\n        </div>\n\n        {cartItems.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <ShoppingCart className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-medium text-gray-900 mb-4\">Your cart is empty</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Discover fresh produce from local farmers and add them to your cart.\n              </p>\n              <Link href=\"/products\">\n                <Button size=\"lg\" data-testid=\"browse-products-button\">\n                  Browse Products\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Cart Items</CardTitle>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={handleClearCart}\n                    disabled={clearCartMutation.isPending}\n                    data-testid=\"clear-cart-button\"\n                  >\n                    Clear All\n                  </Button>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {cartItems.map((item: any) => {\n                    const product = item.product;\n                    const itemTotal = parseFloat(product?.price || \"0\") * item.quantity;\n                    \n                    return (\n                      <div key={item.id} className=\"flex items-center space-x-4 p-4 border rounded-lg\" data-testid={`cart-item-${item.id}`}>\n                        {/* Product Image */}\n                        <Link href={`/products/${product?.id}`}>\n                          <div className=\"w-20 h-20 bg-gray-200 rounded-lg flex-shrink-0 overflow-hidden\">\n                            <img\n                              src={product?.images?.[0] || \"https://images.unsplash.com/photo-1592924357228-91a4daadcfea?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\"}\n                              alt={product?.name}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          </div>\n                        </Link>\n\n                        {/* Product Details */}\n                        <div className=\"flex-1 min-w-0\">\n                          <Link href={`/products/${product?.id}`}>\n                            <h3 className=\"font-medium text-gray-900 truncate hover:text-primary\">\n                              {product?.name}\n                            </h3>\n                          </Link>\n                          <p className=\"text-sm text-gray-500\">\n                            KSh {product?.price} per {product?.unit}\n                          </p>\n                          \n                          {product?.isOrganic && (\n                            <Badge variant=\"outline\" className=\"mt-1 bg-green-50 text-green-700 border-green-200\">\n                              Organic\n                            </Badge>\n                          )}\n                        </div>\n\n                        {/* Quantity Controls */}\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleQuantityChange(item.id, item.quantity, -1)}\n                            disabled={updateQuantityMutation.isPending || item.quantity <= 1}\n                            data-testid={`decrease-quantity-${item.id}`}\n                          >\n                            <Minus className=\"h-3 w-3\" />\n                          </Button>\n                          \n                          <span className=\"w-8 text-center font-medium\" data-testid={`quantity-${item.id}`}>\n                            {item.quantity}\n                          </span>\n                          \n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleQuantityChange(item.id, item.quantity, 1)}\n                            disabled={updateQuantityMutation.isPending}\n                            data-testid={`increase-quantity-${item.id}`}\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n\n                        {/* Item Total */}\n                        <div className=\"text-right\">\n                          <p className=\"font-medium text-gray-900\">\n                            KSh {itemTotal.toFixed(2)}\n                          </p>\n                        </div>\n\n                        {/* Remove Button */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleRemoveItem(item.id)}\n                          disabled={removeItemMutation.isPending}\n                          data-testid={`remove-item-${item.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-red-500\" />\n                        </Button>\n                      </div>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n\n              {/* Continue Shopping */}\n              <div className=\"flex justify-between\">\n                <Link href=\"/products\">\n                  <Button variant=\"outline\" data-testid=\"continue-shopping-button\">\n                    Continue Shopping\n                  </Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"sticky top-8\">\n                <CardHeader>\n                  <CardTitle>Order Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Subtotal */}\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Subtotal</span>\n                    <span className=\"font-medium\" data-testid=\"subtotal-amount\">\n                      KSh {subtotal.toFixed(2)}\n                    </span>\n                  </div>\n\n                  {/* Delivery Fee */}\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Delivery Fee</span>\n                    <span className=\"font-medium\" data-testid=\"delivery-fee\">\n                      {deliveryFee === 0 ? (\n                        <span className=\"text-green-600\">Free</span>\n                      ) : (\n                        `KSh ${deliveryFee.toFixed(2)}`\n                      )}\n                    </span>\n                  </div>\n\n                  {subtotal < 1000 && deliveryFee > 0 && (\n                    <p className=\"text-sm text-gray-500\">\n                      Add KSh {(1000 - subtotal).toFixed(2)} more for free delivery\n                    </p>\n                  )}\n\n                  <Separator />\n\n                  {/* Total */}\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-lg font-semibold\">Total</span>\n                    <span className=\"text-lg font-semibold text-primary\" data-testid=\"total-amount\">\n                      KSh {total.toFixed(2)}\n                    </span>\n                  </div>\n\n                  {/* Checkout Button */}\n                  <Button \n                    className=\"w-full\" \n                    size=\"lg\"\n                    onClick={() => navigate(\"/checkout\")}\n                    data-testid=\"checkout-button\"\n                  >\n                    Proceed to Checkout\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n\n                  {/* Security Notice */}\n                  <div className=\"text-center\">\n                    <p className=\"text-xs text-gray-500\">\n                      Secure checkout with M-Pesa and other payment methods\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":13834},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport Navigation from \"@/components/ui/navigation\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  ArrowLeft, \n  ShoppingCart, \n  MapPin, \n  Phone, \n  CreditCard,\n  Smartphone,\n  CheckCircle,\n  Clock,\n  Shield,\n  Truck\n} from \"lucide-react\";\n\nconst checkoutSchema = z.object({\n  deliveryAddress: z.string().min(10, \"Please provide a detailed delivery address\"),\n  deliveryPhone: z.string().min(10, \"Please provide a valid phone number\").regex(/^(\\+254|0)[17]\\d{8}$/, \"Please provide a valid Kenyan phone number\"),\n  deliveryInstructions: z.string().optional(),\n  paymentMethod: z.enum([\"mpesa\", \"card\"], {\n    required_error: \"Please select a payment method\",\n  }),\n  mpesaPhone: z.string().optional(),\n});\n\ntype CheckoutFormData = z.infer<typeof checkoutSchema>;\n\nexport default function Checkout() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n  const [orderCreated, setOrderCreated] = useState<any>(null);\n\n  const { data: cartItems = [], isLoading: isLoadingCart } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const form = useForm<CheckoutFormData>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      deliveryAddress: \"\",\n      deliveryPhone: \"\",\n      deliveryInstructions: \"\",\n      paymentMethod: \"mpesa\",\n      mpesaPhone: \"\",\n    },\n  });\n\n  const watchPaymentMethod = form.watch(\"paymentMethod\");\n\n  // Redirect if cart is empty\n  useEffect(() => {\n    if (!isLoadingCart && cartItems.length === 0) {\n      toast({\n        title: \"Cart is empty\",\n        description: \"Please add items to your cart before checkout.\",\n        variant: \"destructive\",\n      });\n      navigate(\"/cart\");\n    }\n  }, [cartItems, isLoadingCart, navigate, toast]);\n\n  // Create Order Mutation\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response.json();\n    },\n    onSuccess: (order) => {\n      setOrderCreated(order);\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to place an order.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order failed\",\n        description: \"Failed to create order. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsProcessingPayment(false);\n    },\n  });\n\n  // Process Payment Mutation\n  const processPaymentMutation = useMutation({\n    mutationFn: async ({ orderId, amount, phoneNumber }: { orderId: number; amount: number; phoneNumber: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/payments/mpesa\", {\n        orderId,\n        amount,\n        phoneNumber,\n      });\n      return response.json();\n    },\n    onSuccess: (paymentResult) => {\n      setIsProcessingPayment(false);\n      if (paymentResult.success) {\n        toast({\n          title: \"Payment initiated\",\n          description: \"Please check your phone for M-Pesa prompt and complete the payment.\",\n        });\n        // Poll for payment status or redirect to success page\n        setTimeout(() => {\n          navigate(\"/\");\n        }, 3000);\n      } else {\n        toast({\n          title: \"Payment failed\",\n          description: paymentResult.message || \"Payment processing failed.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      setIsProcessingPayment(false);\n      toast({\n        title: \"Payment error\",\n        description: \"Failed to process payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: CheckoutFormData) => {\n    if (cartItems.length === 0) {\n      toast({\n        title: \"Cart is empty\",\n        description: \"Please add items to your cart before checkout.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessingPayment(true);\n\n    try {\n      // Calculate total\n      const subtotal = cartItems.reduce((total: number, item: any) => {\n        return total + (parseFloat(item.product?.price || \"0\") * item.quantity);\n      }, 0);\n      const deliveryFee = subtotal > 1000 ? 0 : 100;\n      const totalAmount = subtotal + deliveryFee;\n\n      // Create order\n      const orderData = {\n        totalAmount: totalAmount.toString(),\n        deliveryAddress: data.deliveryAddress,\n        deliveryPhone: data.deliveryPhone,\n        deliveryInstructions: data.deliveryInstructions,\n        paymentMethod: data.paymentMethod,\n      };\n\n      const order = await createOrderMutation.mutateAsync(orderData);\n\n      // Process payment based on method\n      if (data.paymentMethod === \"mpesa\") {\n        const phoneNumber = data.mpesaPhone || data.deliveryPhone;\n        await processPaymentMutation.mutateAsync({\n          orderId: order.id,\n          amount: totalAmount,\n          phoneNumber,\n        });\n      } else {\n        // For card payments, would integrate with card processor\n        toast({\n          title: \"Card payment\",\n          description: \"Card payment integration coming soon. Please use M-Pesa.\",\n          variant: \"destructive\",\n        });\n        setIsProcessingPayment(false);\n      }\n    } catch (error) {\n      setIsProcessingPayment(false);\n    }\n  };\n\n  // Calculate totals\n  const subtotal = cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product?.price || \"0\") * item.quantity);\n  }, 0);\n  const deliveryFee = subtotal > 1000 ? 0 : 100;\n  const total = subtotal + deliveryFee;\n\n  if (isLoadingCart) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (orderCreated && isProcessingPayment) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <main className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Clock className=\"h-16 w-16 text-primary mx-auto mb-4 animate-pulse\" />\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Processing Payment</h1>\n              <p className=\"text-gray-600 mb-6\">\n                Please check your phone for the M-Pesa payment prompt and complete the transaction.\n              </p>\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center\">\n                  <Smartphone className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <span className=\"text-sm text-green-800\">\n                    M-Pesa prompt sent to your phone\n                  </span>\n                </div>\n              </div>\n              <Button onClick={() => navigate(\"/\")} variant=\"outline\">\n                Return to Home\n              </Button>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/cart\")}\n            className=\"mb-4\"\n            data-testid=\"back-to-cart\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Cart\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Checkout</h1>\n          <p className=\"text-gray-600\">\n            Complete your order and get fresh produce delivered to your door\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"lg:col-span-2\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Delivery Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <MapPin className=\"h-5 w-5 mr-2\" />\n                      Delivery Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"deliveryAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Delivery Address *</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field} \n                              rows={3}\n                              placeholder=\"Please provide a detailed address including building name, street, area, and landmarks\"\n                              data-testid=\"delivery-address-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"deliveryPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number *</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              placeholder=\"+254 7XX XXX XXX or 07XX XXX XXX\"\n                              data-testid=\"delivery-phone-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"deliveryInstructions\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Delivery Instructions (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field} \n                              rows={2}\n                              placeholder=\"Any special delivery instructions...\"\n                              data-testid=\"delivery-instructions-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-start\">\n                        <Truck className=\"h-5 w-5 text-blue-600 mr-2 mt-0.5\" />\n                        <div className=\"text-sm\">\n                          <p className=\"font-medium text-blue-900\">Delivery Information</p>\n                          <p className=\"text-blue-700\">\n                            • Standard delivery: 1-2 business days<br/>\n                            • Free delivery on orders over KSh 1,000<br/>\n                            • Delivery available within Nairobi and surrounding areas\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Payment Method */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <CreditCard className=\"h-5 w-5 mr-2\" />\n                      Payment Method\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormControl>\n                            <RadioGroup\n                              onValueChange={field.onChange}\n                              defaultValue={field.value}\n                              className=\"space-y-3\"\n                            >\n                              <div className=\"flex items-center space-x-3 p-4 border rounded-lg hover:border-primary transition-colors\">\n                                <RadioGroupItem value=\"mpesa\" id=\"mpesa\" data-testid=\"payment-mpesa\" />\n                                <Label htmlFor=\"mpesa\" className=\"flex-1 cursor-pointer\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-center\">\n                                      <Smartphone className=\"h-5 w-5 text-green-600 mr-3\" />\n                                      <div>\n                                        <p className=\"font-medium\">M-Pesa</p>\n                                        <p className=\"text-sm text-gray-500\">Pay with your mobile phone</p>\n                                      </div>\n                                    </div>\n                                    <Badge className=\"bg-green-600\">Recommended</Badge>\n                                  </div>\n                                </Label>\n                              </div>\n\n                              <div className=\"flex items-center space-x-3 p-4 border rounded-lg opacity-50\">\n                                <RadioGroupItem value=\"card\" id=\"card\" disabled data-testid=\"payment-card\" />\n                                <Label htmlFor=\"card\" className=\"flex-1 cursor-not-allowed\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-center\">\n                                      <CreditCard className=\"h-5 w-5 text-gray-400 mr-3\" />\n                                      <div>\n                                        <p className=\"font-medium\">Credit/Debit Card</p>\n                                        <p className=\"text-sm text-gray-500\">Coming soon</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </Label>\n                              </div>\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {watchPaymentMethod === \"mpesa\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"mpesaPhone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>M-Pesa Phone Number (Optional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                placeholder=\"Leave blank to use delivery phone number\"\n                                data-testid=\"mpesa-phone-input\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-xs text-gray-500\">\n                              If different from delivery phone number\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                      <div className=\"flex items-start\">\n                        <Shield className=\"h-5 w-5 text-green-600 mr-2 mt-0.5\" />\n                        <div className=\"text-sm\">\n                          <p className=\"font-medium text-green-900\">Secure Payment</p>\n                          <p className=\"text-green-700\">\n                            Your payment information is protected with bank-level security. We never store your payment details.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Submit Button */}\n                <Button \n                  type=\"submit\" \n                  size=\"lg\" \n                  className=\"w-full\"\n                  disabled={isProcessingPayment || createOrderMutation.isPending}\n                  data-testid=\"place-order-button\"\n                >\n                  {isProcessingPayment || createOrderMutation.isPending ? (\n                    <>\n                      <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Processing Order...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Place Order - KSh {total.toFixed(2)}\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Cart Items */}\n                <div className=\"space-y-3\">\n                  {cartItems.map((item: any) => {\n                    const product = item.product;\n                    const itemTotal = parseFloat(product?.price || \"0\") * item.quantity;\n                    \n                    return (\n                      <div key={item.id} className=\"flex items-center space-x-3\" data-testid={`order-item-${item.id}`}>\n                        <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex-shrink-0 overflow-hidden\">\n                          <img\n                            src={product?.images?.[0] || \"https://images.unsplash.com/photo-1592924357228-91a4daadcfea?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                            alt={product?.name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium text-sm truncate\">{product?.name}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {item.quantity} × KSh {product?.price}\n                          </p>\n                        </div>\n                        <p className=\"font-medium text-sm\">\n                          KSh {itemTotal.toFixed(2)}\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                <Separator />\n\n                {/* Pricing Breakdown */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Subtotal</span>\n                    <span data-testid=\"checkout-subtotal\">KSh {subtotal.toFixed(2)}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Delivery Fee</span>\n                    <span data-testid=\"checkout-delivery-fee\">\n                      {deliveryFee === 0 ? (\n                        <span className=\"text-green-600 font-medium\">Free</span>\n                      ) : (\n                        `KSh ${deliveryFee.toFixed(2)}`\n                      )}\n                    </span>\n                  </div>\n\n                  {subtotal < 1000 && deliveryFee > 0 && (\n                    <p className=\"text-xs text-gray-500\">\n                      Add KSh {(1000 - subtotal).toFixed(2)} more for free delivery\n                    </p>\n                  )}\n                </div>\n\n                <Separator />\n\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total</span>\n                  <span className=\"text-primary\" data-testid=\"checkout-total\">\n                    KSh {total.toFixed(2)}\n                  </span>\n                </div>\n\n                {/* Security Badges */}\n                <div className=\"pt-4 border-t\">\n                  <div className=\"flex items-center justify-center space-x-4 text-xs text-gray-500\">\n                    <div className=\"flex items-center\">\n                      <Shield className=\"h-3 w-3 mr-1\" />\n                      Secure\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Smartphone className=\"h-3 w-3 mr-1\" />\n                      M-Pesa\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":22816},"client/src/pages/farmer-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/ui/navigation\";\nimport ProductCard from \"@/components/ui/product-card\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Plus, \n  Package, \n  DollarSign, \n  TrendingUp, \n  ShoppingCart,\n  Star,\n  Edit,\n  Trash2,\n  Eye,\n  Users,\n  Calendar\n} from \"lucide-react\";\n\nconst farmerProfileSchema = z.object({\n  farmName: z.string().min(1, \"Farm name is required\"),\n  description: z.string().optional(),\n  county: z.string().min(1, \"County is required\"),\n  subCounty: z.string().optional(),\n  experience: z.number().min(0, \"Experience must be positive\").optional(),\n  specializations: z.array(z.string()).optional(),\n});\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().optional(),\n  categoryId: z.number().min(1, \"Category is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  unit: z.string().min(1, \"Unit is required\"),\n  stock: z.number().min(0, \"Stock must be positive\"),\n  isOrganic: z.boolean().optional(),\n});\n\nexport default function FarmerDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n\n  useEffect(() => {\n    if (!user?.isLoading && user?.role !== 'farmer') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You need farmer access to view this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1500);\n    }\n  }, [user, toast]);\n\n  const { data: farmer } = useQuery({\n    queryKey: [\"/api/farmers\", \"by-user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\", { farmerId: farmer?.id }],\n    enabled: !!farmer?.id,\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: !!farmer?.id,\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Farmer Profile Form\n  const profileForm = useForm({\n    resolver: zodResolver(farmerProfileSchema),\n    defaultValues: {\n      farmName: farmer?.farmName || \"\",\n      description: farmer?.description || \"\",\n      county: farmer?.county || \"\",\n      subCounty: farmer?.subCounty || \"\",\n      experience: farmer?.experience || 0,\n      specializations: farmer?.specializations || [],\n    },\n  });\n\n  // Product Form\n  const productForm = useForm({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      categoryId: 0,\n      price: \"\",\n      unit: \"\",\n      stock: 0,\n      isOrganic: false,\n    },\n  });\n\n  // Create/Update Farmer Profile\n  const profileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (farmer) {\n        return await apiRequest(\"PATCH\", `/api/farmers/${farmer.id}`, data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/farmers\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile updated\",\n        description: \"Your farmer profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/farmers\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to update your profile.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create/Update Product\n  const productMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingProduct) {\n        return await apiRequest(\"PATCH\", `/api/products/${editingProduct.id}`, data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/products\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: editingProduct ? \"Product updated\" : \"Product created\",\n        description: `Product has been ${editingProduct ? 'updated' : 'created'} successfully.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      productForm.reset();\n      setEditingProduct(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to manage products.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingProduct ? 'update' : 'create'} product. Please try again.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete Product\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: number) => {\n      await apiRequest(\"DELETE\", `/api/products/${productId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Product deleted\",\n        description: \"Product has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete product. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onProfileSubmit = (data: any) => {\n    profileMutation.mutate({\n      ...data,\n      experience: parseInt(data.experience) || 0,\n    });\n  };\n\n  const onProductSubmit = (data: any) => {\n    productMutation.mutate({\n      ...data,\n      categoryId: parseInt(data.categoryId),\n      price: data.price,\n      stock: parseInt(data.stock) || 0,\n    });\n  };\n\n  const handleEditProduct = (product: any) => {\n    setEditingProduct(product);\n    productForm.setValue(\"name\", product.name);\n    productForm.setValue(\"description\", product.description || \"\");\n    productForm.setValue(\"categoryId\", product.categoryId);\n    productForm.setValue(\"price\", product.price);\n    productForm.setValue(\"unit\", product.unit);\n    productForm.setValue(\"stock\", product.stock);\n    productForm.setValue(\"isOrganic\", product.isOrganic || false);\n    setActiveTab(\"products\");\n  };\n\n  const handleDeleteProduct = (productId: number) => {\n    if (confirm(\"Are you sure you want to delete this product?\")) {\n      deleteProductMutation.mutate(productId);\n    }\n  };\n\n  // Calculate stats\n  const totalRevenue = orders.reduce((sum: number, order: any) => sum + parseFloat(order.totalAmount), 0);\n  const totalOrders = orders.length;\n  const averageRating = farmer?.rating ? parseFloat(farmer.rating) : 0;\n\n  if (user?.isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Farmer Dashboard</h1>\n          <p className=\"text-gray-600\">\n            Manage your farm profile, products, and orders\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products</TabsTrigger>\n            <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"mt-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                  <Package className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary\">{products.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">Active listings</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n                  <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-secondary\">{totalOrders}</div>\n                  <p className=\"text-xs text-muted-foreground\">All time orders</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">KSh {totalRevenue.toFixed(0)}</div>\n                  <p className=\"text-xs text-muted-foreground\">All time revenue</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Rating</CardTitle>\n                  <Star className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-earth-brown\">{averageRating.toFixed(1)}</div>\n                  <p className=\"text-xs text-muted-foreground\">{farmer?.totalReviews || 0} reviews</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Products */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle>Recent Products</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {products.length > 0 ? (\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {products.slice(0, 6).map((product: any) => (\n                      <ProductCard key={product.id} product={product} showFarmerInfo={false} />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products yet</h3>\n                    <p className=\"text-gray-600 mb-4\">Start by adding your first product to the marketplace.</p>\n                    <Button onClick={() => setActiveTab(\"products\")}>\n                      Add Your First Product\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"profile\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Farmer Profile</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...profileForm}>\n                  <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={profileForm.control}\n                        name=\"farmName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Farm Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"farm-name-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={profileForm.control}\n                        name=\"county\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>County *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"county-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={profileForm.control}\n                        name=\"subCounty\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sub County</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"sub-county-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={profileForm.control}\n                        name=\"experience\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Years of Experience</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                {...field} \n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                data-testid=\"experience-input\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={profileForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Farm Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field} \n                              rows={4}\n                              placeholder=\"Tell customers about your farm, farming practices, and what makes your products special...\"\n                              data-testid=\"description-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      disabled={profileMutation.isPending}\n                      data-testid=\"save-profile-button\"\n                    >\n                      {profileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"products\" className=\"mt-6\">\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {/* Add/Edit Product Form */}\n              <Card className=\"lg:col-span-1\">\n                <CardHeader>\n                  <CardTitle>\n                    {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Form {...productForm}>\n                    <form onSubmit={productForm.handleSubmit(onProductSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={productForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Product Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"product-name-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={productForm.control}\n                        name=\"categoryId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category *</FormLabel>\n                            <Select value={field.value?.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"category-select\">\n                                  <SelectValue placeholder=\"Select a category\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {categories.map((category: any) => (\n                                  <SelectItem key={category.id} value={category.id.toString()}>\n                                    {category.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={productForm.control}\n                          name=\"price\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Price (KSh) *</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"price-input\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={productForm.control}\n                          name=\"unit\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Unit *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"kg, piece, bunch\" {...field} data-testid=\"unit-input\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={productForm.control}\n                        name=\"stock\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Stock Quantity *</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                {...field} \n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                data-testid=\"stock-input\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={productForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                {...field} \n                                rows={3}\n                                placeholder=\"Describe your product...\"\n                                data-testid=\"product-description-input\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex gap-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={productMutation.isPending}\n                          data-testid=\"save-product-button\"\n                        >\n                          {productMutation.isPending \n                            ? \"Saving...\" \n                            : editingProduct \n                              ? \"Update Product\" \n                              : \"Add Product\"\n                          }\n                        </Button>\n                        \n                        {editingProduct && (\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              setEditingProduct(null);\n                              productForm.reset();\n                            }}\n                          >\n                            Cancel\n                          </Button>\n                        )}\n                      </div>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n\n              {/* Products List */}\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle>Your Products ({products.length})</CardTitle>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {products.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {products.map((product: any) => (\n                          <div key={product.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex-shrink-0\"></div>\n                              <div>\n                                <h3 className=\"font-medium text-gray-900\">{product.name}</h3>\n                                <p className=\"text-sm text-gray-500\">\n                                  KSh {product.price} per {product.unit}\n                                </p>\n                                <div className=\"flex items-center gap-2 mt-1\">\n                                  <Badge variant={product.stock > 0 ? \"default\" : \"destructive\"}>\n                                    {product.stock > 0 ? `${product.stock} in stock` : \"Out of stock\"}\n                                  </Badge>\n                                  {product.isOrganic && (\n                                    <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">\n                                      Organic\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => handleEditProduct(product)}\n                                data-testid={`edit-product-${product.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => handleDeleteProduct(product.id)}\n                                data-testid={`delete-product-${product.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products yet</h3>\n                        <p className=\"text-gray-600\">Add your first product to start selling.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {orders.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {orders.map((order: any) => (\n                      <div key={order.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div>\n                            <h3 className=\"font-medium\">Order #{order.id}</h3>\n                            <p className=\"text-sm text-gray-500\">\n                              {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">KSh {parseFloat(order.totalAmount).toFixed(2)}</p>\n                            <Badge \n                              variant={\n                                order.status === 'delivered' ? 'default' :\n                                order.status === 'shipped' ? 'secondary' :\n                                order.status === 'confirmed' ? 'outline' : 'destructive'\n                              }\n                            >\n                              {order.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <ShoppingCart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders yet</h3>\n                    <p className=\"text-gray-600\">Orders will appear here when customers purchase your products.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":29180},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Navigation from \"@/components/ui/navigation\";\nimport ProductCard from \"@/components/ui/product-card\";\nimport CategoryFilter from \"@/components/ui/category-filter\";\nimport { Package, ShoppingCart, TrendingUp, Users } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: farmers = [] } = useQuery({\n    queryKey: [\"/api/farmers\"],\n  });\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const featuredProducts = products.slice(0, 8);\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            Welcome back, {user?.firstName || 'there'}! 👋\n          </h1>\n          <p className=\"text-gray-600\">\n            Discover fresh produce from local farmers or manage your farming business.\n          </p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Available Products</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-primary\">{products.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Fresh from local farms</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Farmers</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{farmers.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Verified suppliers</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-secondary\">{categories.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Product varieties</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Your Orders</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-earth-brown\">{orders.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Total orders placed</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n          <div className=\"flex flex-wrap gap-4\">\n            <Link href=\"/products\">\n              <Button className=\"flex items-center gap-2\" data-testid=\"browse-products-button\">\n                <Package className=\"h-4 w-4\" />\n                Browse Products\n              </Button>\n            </Link>\n            \n            <Link href=\"/cart\">\n              <Button variant=\"outline\" className=\"flex items-center gap-2\" data-testid=\"view-cart-button\">\n                <ShoppingCart className=\"h-4 w-4\" />\n                View Cart\n              </Button>\n            </Link>\n\n            {user?.role === 'farmer' && (\n              <Link href=\"/farmer-dashboard\">\n                <Button variant=\"outline\" className=\"flex items-center gap-2\" data-testid=\"farmer-dashboard-button\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Farmer Dashboard\n                </Button>\n              </Link>\n            )}\n\n            {user?.role === 'admin' && (\n              <Link href=\"/admin-dashboard\">\n                <Button variant=\"outline\" className=\"flex items-center gap-2\" data-testid=\"admin-dashboard-button\">\n                  <Users className=\"h-4 w-4\" />\n                  Admin Dashboard\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {/* Categories */}\n        <CategoryFilter categories={categories} />\n\n        {/* Featured Products */}\n        <section className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">Fresh Today</h2>\n              <p className=\"text-gray-600\">Handpicked by our farming community</p>\n            </div>\n            <Link href=\"/products\">\n              <Button variant=\"ghost\" data-testid=\"view-all-products\">\n                View All →\n              </Button>\n            </Link>\n          </div>\n\n          {featuredProducts.length > 0 ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {featuredProducts.map((product: any) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products available</h3>\n                <p className=\"text-gray-600 mb-4\">Be the first to add fresh produce to the marketplace!</p>\n                {user?.role === 'farmer' && (\n                  <Link href=\"/farmer-dashboard\">\n                    <Button>Add Your First Product</Button>\n                  </Link>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </section>\n\n        {/* Call to Action */}\n        {user?.role === 'consumer' && (\n          <Card className=\"bg-gradient-to-r from-primary to-green-600 text-white\">\n            <CardContent className=\"text-center py-12\">\n              <h3 className=\"text-2xl font-bold mb-4\">Ready to start shopping?</h3>\n              <p className=\"text-green-50 mb-6\">\n                Discover fresh produce from verified local farmers and support sustainable agriculture.\n              </p>\n              <Link href=\"/products\">\n                <Button variant=\"secondary\" size=\"lg\" className=\"bg-white text-primary hover:bg-gray-100\">\n                  Start Shopping Now\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n\n        {user?.role === 'farmer' && !user?.farmer && (\n          <Card className=\"bg-gradient-to-r from-green-600 to-primary text-white\">\n            <CardContent className=\"text-center py-12\">\n              <h3 className=\"text-2xl font-bold mb-4\">Complete your farmer profile</h3>\n              <p className=\"text-green-50 mb-6\">\n                Set up your farm details to start selling your fresh produce to customers across Kenya.\n              </p>\n              <Link href=\"/farmer-dashboard\">\n                <Button variant=\"secondary\" size=\"lg\" className=\"bg-white text-primary hover:bg-gray-100\">\n                  Complete Profile\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":8358},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { Sprout, Search, ShoppingCart, Smartphone, Truck, Heart, Star, Shield, Leaf, HandHeart } from \"lucide-react\";\n\nexport default function Landing() {\n  const categories = [\n    { name: \"Fruits\", icon: \"🍎\", count: \"120+ items\", color: \"bg-yellow-100 hover:bg-yellow-200\" },\n    { name: \"Vegetables\", icon: \"🥕\", count: \"85+ items\", color: \"bg-green-100 hover:bg-green-200\" },\n    { name: \"Grains\", icon: \"🌾\", count: \"45+ items\", color: \"bg-yellow-100 hover:bg-yellow-200\" },\n    { name: \"Dairy\", icon: \"🧀\", count: \"30+ items\", color: \"bg-blue-100 hover:bg-blue-200\" },\n    { name: \"Herbs\", icon: \"🌿\", count: \"25+ items\", color: \"bg-green-100 hover:bg-green-200\" },\n    { name: \"Livestock\", icon: \"🥚\", count: \"15+ items\", color: \"bg-orange-100 hover:bg-orange-200\" },\n  ];\n\n  const featuredProducts = [\n    {\n      id: 1,\n      name: \"Organic Tomatoes\",\n      price: \"KSh 120\",\n      originalPrice: \"KSh 150\",\n      unit: \"Per kg\",\n      farmer: \"John Mwangi\",\n      location: \"Kiambu County\",\n      rating: 4.8,\n      reviews: 24,\n      stock: \"12 kg left\",\n      badge: \"Fresh Today\",\n      badgeColor: \"bg-primary\",\n    },\n    {\n      id: 2,\n      name: \"Fresh Spinach\",\n      price: \"KSh 50\",\n      unit: \"Per bunch\",\n      farmer: \"Mary Wanjiku\",\n      location: \"Nakuru County\",\n      rating: 4.2,\n      reviews: 18,\n      stock: \"8 bunches left\",\n      badge: \"Organic\",\n      badgeColor: \"bg-green-600\",\n    },\n    {\n      id: 3,\n      name: \"Sweet Bananas\",\n      price: \"KSh 200\",\n      unit: \"Per dozen\",\n      farmer: \"Samuel Kiprop\",\n      location: \"Meru County\",\n      rating: 5.0,\n      reviews: 31,\n      stock: \"15 dozens left\",\n      badge: \"Premium\",\n      badgeColor: \"bg-yellow-600\",\n    },\n    {\n      id: 4,\n      name: \"Hass Avocados\",\n      price: \"KSh 80\",\n      unit: \"Per piece\",\n      farmer: \"Grace Muthoni\",\n      location: \"Murang'a County\",\n      rating: 4.6,\n      reviews: 12,\n      stock: \"25 pieces left\",\n      badge: \"Export Quality\",\n      badgeColor: \"bg-primary\",\n    },\n  ];\n\n  const featuredFarmers = [\n    {\n      name: \"John Mwangi\",\n      location: \"Kiambu County\",\n      experience: \"15+ years experience\",\n      description: \"I specialize in organic vegetables and have been farming for over 15 years. My passion is growing healthy food for families across Kenya.\",\n      rating: 4.9,\n      reviews: \"120+ reviews\",\n    },\n    {\n      name: \"Mary Wanjiku\",\n      location: \"Nakuru County\",\n      experience: \"Organic Certified\",\n      description: \"I focus on sustainable farming practices and grow the freshest leafy greens. Every harvest is done with care for both quality and environment.\",\n      rating: 4.6,\n      reviews: \"85+ reviews\",\n    },\n    {\n      name: \"Samuel Kiprop\",\n      location: \"Meru County\",\n      experience: \"Fruit Specialist\",\n      description: \"My family has been growing premium fruits for three generations. We take pride in delivering the sweetest, most nutritious fruits in Kenya.\",\n      rating: 5.0,\n      reviews: \"200+ reviews\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo and Brand */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Sprout className=\"text-white h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Kenya Harvest Hub</h1>\n                <p className=\"text-xs text-gray-500 hidden sm:block\">Farm to Table</p>\n              </div>\n            </div>\n\n            {/* Search Bar */}\n            <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n              <div className=\"relative w-full\">\n                <Input \n                  type=\"text\" \n                  placeholder=\"Search fresh produce...\" \n                  className=\"pl-10\"\n                  data-testid=\"search-input\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              </div>\n            </div>\n\n            {/* Navigation Actions */}\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                <Search className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" onClick={() => window.location.href = '/cart'} data-testid=\"cart-button\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-secondary\">3</Badge>\n              </Button>\n              <div className=\"hidden sm:flex items-center space-x-2\">\n                <Button variant=\"outline\" onClick={() => window.location.href = '/api/login'} data-testid=\"signin-button\">\n                  Sign In\n                </Button>\n                <Button onClick={() => window.location.href = '/api/login'} data-testid=\"join-farmer-button\">\n                  Join as Farmer\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Search Bar */}\n        <div className=\"md:hidden px-4 pb-3\">\n          <div className=\"relative\">\n            <Input \n              type=\"text\" \n              placeholder=\"Search fresh produce...\" \n              className=\"pl-10\"\n              data-testid=\"mobile-search-input\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary to-green-600 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 lg:py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-8 items-center\">\n            <div>\n              <h2 className=\"text-3xl lg:text-5xl font-bold mb-6\">\n                Fresh from <span className=\"text-yellow-300\">Kenyan Farms</span> to Your Table\n              </h2>\n              <p className=\"text-lg lg:text-xl mb-8 text-green-50\">\n                Connect directly with local farmers. Get the freshest produce while supporting sustainable agriculture and fair prices.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-secondary hover:bg-secondary-dark text-white\"\n                  onClick={() => window.location.href = '/products'}\n                  data-testid=\"start-shopping-button\"\n                >\n                  Start Shopping\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  className=\"border-2 border-white bg-white text-primary hover:bg-primary hover:text-white\"\n                  onClick={() => window.location.href = '/api/login'}\n                  data-testid=\"become-supplier-button\"\n                >\n                  Become a Supplier\n                </Button>\n              </div>\n            </div>\n            <div className=\"hidden lg:block\">\n              <img \n                src=\"https://images.unsplash.com/photo-1488459716781-31db52582fe9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Fresh vegetables at Kenyan farmers market\" \n                className=\"rounded-xl shadow-2xl w-full h-auto\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Category Filter */}\n      <section className=\"bg-white py-8 border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">Shop by Category</h3>\n            <Button variant=\"ghost\" onClick={() => window.location.href = '/products'} data-testid=\"view-all-categories\">\n              View All <span className=\"ml-1\">→</span>\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {categories.map((category, index) => (\n              <Link key={index} href=\"/products\">\n                <div className=\"text-center group cursor-pointer\" data-testid={`category-${category.name.toLowerCase()}`}>\n                  <div className={`${category.color} rounded-full w-16 h-16 mx-auto mb-3 flex items-center justify-center transition-colors`}>\n                    <span className=\"text-2xl\">{category.icon}</span>\n                  </div>\n                  <p className=\"text-sm font-medium text-gray-700\">{category.name}</p>\n                  <p className=\"text-xs text-gray-500\">{category.count}</p>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-12 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900\">Fresh Today</h3>\n              <p className=\"text-gray-600 mt-1\">Handpicked by our farming community</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {featuredProducts.map((product) => (\n              <Card key={product.id} className=\"overflow-hidden group cursor-pointer hover:shadow-lg transition-shadow\" data-testid={`product-card-${product.id}`}>\n                <div className=\"relative\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1592924357228-91a4daadcfea?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\" \n                    alt={product.name}\n                    className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <Badge className={`absolute top-3 left-3 ${product.badgeColor} text-white`}>\n                    {product.badge}\n                  </Badge>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"absolute top-3 right-3 bg-white bg-opacity-90 hover:bg-opacity-100\">\n                    <Heart className=\"h-4 w-4 text-gray-600\" />\n                  </Button>\n                </div>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">{product.name}</h4>\n                      <p className=\"text-sm text-gray-500\">{product.unit}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold text-primary\">{product.price}</p>\n                      {product.originalPrice && (\n                        <p className=\"text-xs text-gray-500 line-through\">{product.originalPrice}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center mb-3\">\n                    <div className=\"w-6 h-6 rounded-full bg-gray-300 mr-2\"></div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-700 truncate\">{product.farmer}</p>\n                      <p className=\"text-xs text-gray-500\">{product.location}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center\">\n                      <div className=\"flex text-yellow-400 text-sm\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <Star key={i} className={`h-4 w-4 ${i < Math.floor(product.rating) ? 'fill-current' : ''}`} />\n                        ))}\n                      </div>\n                      <span className=\"text-sm text-gray-600 ml-2\">{product.rating} ({product.reviews})</span>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">{product.stock}</span>\n                  </div>\n\n                  <Button \n                    className=\"w-full\" \n                    onClick={() => window.location.href = '/api/login'}\n                    data-testid={`add-to-cart-${product.id}`}\n                  >\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                    Add to Cart\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-8\">\n            <Button variant=\"outline\" size=\"lg\" onClick={() => window.location.href = '/products'} data-testid=\"load-more-products\">\n              Load More Products\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">How Kenya Harvest Hub Works</h3>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Connecting farmers and consumers in just a few simple steps\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-primary bg-opacity-10 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Search className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-3\">Browse & Select</h4>\n              <p className=\"text-gray-600\">\n                Discover fresh produce from verified local farmers. Filter by location, category, and rating to find exactly what you need.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-secondary bg-opacity-10 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Smartphone className=\"h-8 w-8 text-secondary\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-3\">Order & Pay</h4>\n              <p className=\"text-gray-600\">\n                Place your order and pay securely using M-Pesa or other preferred payment methods. Track your order in real-time.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-green-600 bg-opacity-10 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Truck className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-3\">Fresh Delivery</h4>\n              <p className=\"text-gray-600\">\n                Receive fresh produce delivered directly from the farm to your doorstep. Support local farmers while getting the best quality.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Farmer Spotlight */}\n      <section className=\"py-16 bg-earth-beige\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">Meet Our Farmers</h3>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Get to know the hardworking farmers behind your fresh produce\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {featuredFarmers.map((farmer, index) => (\n              <Card key={index} className=\"overflow-hidden\" data-testid={`farmer-card-${index}`}>\n                <div className=\"relative\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1574943320219-553eb213f72d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\" \n                    alt={`Farmer ${farmer.name}`}\n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <Badge className=\"absolute bottom-4 left-4 bg-primary text-white\">\n                    {farmer.experience}\n                  </Badge>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"w-12 h-12 rounded-full bg-gray-300 mr-3\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">{farmer.name}</h4>\n                      <p className=\"text-sm text-gray-500\">{farmer.location}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 mb-4\">{farmer.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex text-yellow-400 text-sm mb-1\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <Star key={i} className={`h-4 w-4 ${i < Math.floor(farmer.rating) ? 'fill-current' : ''}`} />\n                        ))}\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{farmer.rating} rating • {farmer.reviews}</p>\n                    </div>\n                    <Button variant=\"ghost\" className=\"text-primary hover:text-primary-dark\">\n                      View Profile →\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Value Proposition */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h3 className=\"text-3xl font-bold text-gray-900 mb-6\">\n                Why Choose Kenya Harvest Hub?\n              </h3>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <div className=\"bg-primary bg-opacity-10 rounded-lg p-3 mr-4\">\n                    <HandHeart className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Fair Prices for Farmers</h4>\n                    <p className=\"text-gray-600\">Direct connection eliminates middlemen, ensuring farmers get fair compensation for their hard work.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"bg-green-600 bg-opacity-10 rounded-lg p-3 mr-4\">\n                    <Leaf className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Fresh & Sustainable</h4>\n                    <p className=\"text-gray-600\">Farm-to-table freshness with sustainable farming practices that protect our environment.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"bg-secondary bg-opacity-10 rounded-lg p-3 mr-4\">\n                    <Shield className=\"h-6 w-6 text-secondary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Quality Guaranteed</h4>\n                    <p className=\"text-gray-600\">Every farmer is verified and products are quality-checked before reaching your table.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"bg-blue-600 bg-opacity-10 rounded-lg p-3 mr-4\">\n                    <Smartphone className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Easy M-Pesa Payments</h4>\n                    <p className=\"text-gray-600\">Seamless mobile payments through M-Pesa and other popular payment methods in Kenya.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-6\">\n              <Card className=\"text-center p-6\">\n                <div className=\"text-3xl font-bold text-primary mb-2\">500+</div>\n                <p className=\"text-gray-600\">Verified Farmers</p>\n              </Card>\n              <Card className=\"text-center p-6\">\n                <div className=\"text-3xl font-bold text-secondary mb-2\">2,000+</div>\n                <p className=\"text-gray-600\">Happy Customers</p>\n              </Card>\n              <Card className=\"text-center p-6\">\n                <div className=\"text-3xl font-bold text-green-600 mb-2\">10,000+</div>\n                <p className=\"text-gray-600\">Orders Delivered</p>\n              </Card>\n              <Card className=\"text-center p-6\">\n                <div className=\"text-3xl font-bold text-earth-brown mb-2\">25+</div>\n                <p className=\"text-gray-600\">Counties Served</p>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {/* Company Info */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <Sprout className=\"text-white h-5 w-5\" />\n                </div>\n                <h3 className=\"text-lg font-bold\">Kenya Harvest Hub</h3>\n              </div>\n              <p className=\"text-gray-400 mb-4\">\n                Connecting Kenyan farmers directly with consumers for fresh, fair-trade produce.\n              </p>\n            </div>\n\n            {/* Quick Links */}\n            <div>\n              <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Browse Products</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Find Farmers</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">How It Works</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Become a Supplier</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">About Us</a></li>\n              </ul>\n            </div>\n\n            {/* Customer Support */}\n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Order Tracking</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Shipping Info</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Returns & Refunds</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Contact Us</a></li>\n              </ul>\n            </div>\n\n            {/* Contact & Payment */}\n            <div>\n              <h4 className=\"font-semibold mb-4\">Contact Us</h4>\n              <div className=\"space-y-2 text-gray-400\">\n                <p>+254 700 123 456</p>\n                <p>info@kenyaharvesthub.co.ke</p>\n                <p>Nairobi, Kenya</p>\n              </div>\n              <div className=\"mt-4\">\n                <h5 className=\"font-medium mb-2\">We Accept</h5>\n                <div className=\"flex items-center space-x-3\">\n                  <Badge className=\"bg-green-600 text-white\">M-PESA</Badge>\n                  <span className=\"text-gray-400\">Visa • Mastercard</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\">\n              © 2024 Kenya Harvest Hub. All rights reserved.\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">Privacy Policy</a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">Terms of Service</a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">Cookie Policy</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":25718},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Navigation from \"@/components/ui/navigation\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  ArrowLeft, \n  ShoppingCart, \n  Heart, \n  Star, \n  MapPin, \n  Truck, \n  Shield, \n  Leaf,\n  Calendar,\n  Package,\n  Plus,\n  Minus,\n  ThumbsUp\n} from \"lucide-react\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImage, setSelectedImage] = useState(0);\n  const [showReviewForm, setShowReviewForm] = useState(false);\n  const [reviewData, setReviewData] = useState({ rating: 5, comment: \"\" });\n\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", id],\n    enabled: !!id && !isNaN(parseInt(id!)),\n  });\n\n  const { data: reviews = [] } = useQuery({\n    queryKey: [\"/api/reviews\", id],\n    enabled: !!id && !isNaN(parseInt(id!)),\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/cart\", {\n        productId: parseInt(id!),\n        quantity,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Added to cart\",\n        description: `${quantity} ${product?.unit} of ${product?.name} added to your cart.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to add items to cart.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitReviewMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/reviews\", {\n        productId: parseInt(id!),\n        rating: reviewData.rating,\n        comment: reviewData.comment,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review submitted\",\n        description: \"Thank you for your feedback!\",\n      });\n      setShowReviewForm(false);\n      setReviewData({ rating: 5, comment: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to submit a review.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-32 mb-6\"></div>\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-8 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-neutral-warm\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Product not found</h3>\n              <p className=\"text-gray-600 mb-4\">The product you're looking for doesn't exist.</p>\n              <Button onClick={() => navigate(\"/products\")}>\n                Browse Products\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const images = product.images && product.images.length > 0 \n    ? product.images \n    : [\"https://images.unsplash.com/photo-1592924357228-91a4daadcfea?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"];\n\n  const averageRating = reviews.length > 0 \n    ? reviews.reduce((sum: number, review: any) => sum + review.rating, 0) / reviews.length \n    : parseFloat(product.rating || \"0\");\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back Button */}\n        <Button \n          variant=\"ghost\" \n          onClick={() => navigate(\"/products\")}\n          className=\"mb-6\"\n          data-testid=\"back-button\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Products\n        </Button>\n\n        <div className=\"grid lg:grid-cols-2 gap-8 mb-8\">\n          {/* Product Images */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square rounded-lg overflow-hidden bg-gray-100\">\n              <img\n                src={images[selectedImage]}\n                alt={product.name}\n                className=\"w-full h-full object-cover\"\n                data-testid=\"product-main-image\"\n              />\n            </div>\n            \n            {images.length > 1 && (\n              <div className=\"grid grid-cols-4 gap-2\">\n                {images.map((image: string, index: number) => (\n                  <button\n                    key={index}\n                    onClick={() => setSelectedImage(index)}\n                    className={`aspect-square rounded-lg overflow-hidden ${\n                      selectedImage === index ? 'ring-2 ring-primary' : ''\n                    }`}\n                    data-testid={`product-thumbnail-${index}`}\n                  >\n                    <img\n                      src={image}\n                      alt={`${product.name} ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-start justify-between mb-2\">\n                <h1 className=\"text-2xl font-bold text-gray-900\" data-testid=\"product-name\">\n                  {product.name}\n                </h1>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"wishlist-button\">\n                  <Heart className=\"h-5 w-5\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex text-yellow-400\">\n                    {Array.from({ length: 5 }, (_, i) => (\n                      <Star \n                        key={i} \n                        className={`h-4 w-4 ${i < Math.floor(averageRating) ? 'fill-current' : ''}`} \n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-sm text-gray-600 ml-2\">\n                    {averageRating.toFixed(1)} ({reviews.length} review{reviews.length !== 1 ? 's' : ''})\n                  </span>\n                </div>\n                \n                {product.isOrganic && (\n                  <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                    <Leaf className=\"h-3 w-3 mr-1\" />\n                    Organic\n                  </Badge>\n                )}\n              </div>\n\n              <div className=\"flex items-end gap-2 mb-4\">\n                <span className=\"text-3xl font-bold text-primary\" data-testid=\"product-price\">\n                  KSh {product.price}\n                </span>\n                <span className=\"text-gray-500\">per {product.unit}</span>\n              </div>\n\n              <p className=\"text-gray-600 leading-relaxed\" data-testid=\"product-description\">\n                {product.description}\n              </p>\n            </div>\n\n            {/* Farmer Info */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-gray-300\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">Farmer Details</p>\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                      Location information\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    View Profile\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Product Details */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center\">\n                <Package className=\"h-4 w-4 text-gray-400 mr-2\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Stock</p>\n                  <p className=\"text-sm text-gray-600\">{product.stock} {product.unit} available</p>\n                </div>\n              </div>\n              \n              {product.harvestDate && (\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-4 w-4 text-gray-400 mr-2\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Harvested</p>\n                    <p className=\"text-sm text-gray-600\">\n                      {new Date(product.harvestDate).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex items-center\">\n                <Truck className=\"h-4 w-4 text-gray-400 mr-2\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Delivery</p>\n                  <p className=\"text-sm text-gray-600\">1-2 days</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center\">\n                <Shield className=\"h-4 w-4 text-gray-400 mr-2\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Quality</p>\n                  <p className=\"text-sm text-gray-600\">Guaranteed fresh</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Quantity and Add to Cart */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Quantity\n                </label>\n                <div className=\"flex items-center space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                    disabled={quantity <= 1}\n                    data-testid=\"decrease-quantity\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <Input\n                    type=\"number\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                    className=\"w-20 text-center\"\n                    min=\"1\"\n                    max={product.stock}\n                    data-testid=\"quantity-input\"\n                  />\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setQuantity(Math.min(product.stock, quantity + 1))}\n                    disabled={quantity >= product.stock}\n                    data-testid=\"increase-quantity\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <span className=\"text-sm text-gray-500\">\n                    {product.unit}\n                  </span>\n                </div>\n              </div>\n\n              <Button\n                size=\"lg\"\n                className=\"w-full\"\n                onClick={() => addToCartMutation.mutate()}\n                disabled={addToCartMutation.isPending || product.stock < 1}\n                data-testid=\"add-to-cart-button\"\n              >\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                {addToCartMutation.isPending \n                  ? \"Adding to Cart...\" \n                  : product.stock < 1 \n                    ? \"Out of Stock\" \n                    : `Add to Cart - KSh ${(parseFloat(product.price) * quantity).toFixed(2)}`\n                }\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Reviews Section */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Customer Reviews</CardTitle>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowReviewForm(!showReviewForm)}\n                data-testid=\"write-review-button\"\n              >\n                Write a Review\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {showReviewForm && (\n              <div className=\"border-b pb-6 mb-6\">\n                <h3 className=\"font-medium mb-4\">Write a Review</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Rating\n                    </label>\n                    <Select \n                      value={reviewData.rating.toString()} \n                      onValueChange={(value) => setReviewData({ ...reviewData, rating: parseInt(value) })}\n                    >\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"5\">5 Stars</SelectItem>\n                        <SelectItem value=\"4\">4 Stars</SelectItem>\n                        <SelectItem value=\"3\">3 Stars</SelectItem>\n                        <SelectItem value=\"2\">2 Stars</SelectItem>\n                        <SelectItem value=\"1\">1 Star</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Comment\n                    </label>\n                    <Textarea\n                      value={reviewData.comment}\n                      onChange={(e) => setReviewData({ ...reviewData, comment: e.target.value })}\n                      placeholder=\"Share your experience with this product...\"\n                      rows={4}\n                      data-testid=\"review-comment-input\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button \n                      onClick={() => submitReviewMutation.mutate()}\n                      disabled={submitReviewMutation.isPending}\n                      data-testid=\"submit-review-button\"\n                    >\n                      {submitReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowReviewForm(false)}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {reviews.length > 0 ? (\n              <div className=\"space-y-4\">\n                {reviews.map((review: any) => (\n                  <div key={review.id} className=\"border-b pb-4 last:border-b-0\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div>\n                        <div className=\"flex items-center mb-1\">\n                          <div className=\"flex text-yellow-400 text-sm\">\n                            {Array.from({ length: 5 }, (_, i) => (\n                              <Star \n                                key={i} \n                                className={`h-3 w-3 ${i < review.rating ? 'fill-current' : ''}`} \n                              />\n                            ))}\n                          </div>\n                          <span className=\"text-sm text-gray-600 ml-2\">\n                            {review.rating}/5\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-500\">\n                          {new Date(review.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                        Helpful\n                      </Button>\n                    </div>\n                    {review.comment && (\n                      <p className=\"text-gray-700\">{review.comment}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Star className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No reviews yet</h3>\n                <p className=\"text-gray-600\">Be the first to review this product!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":18919},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navigation from \"@/components/ui/navigation\";\nimport ProductCard from \"@/components/ui/product-card\";\nimport CategoryFilter from \"@/components/ui/category-filter\";\nimport { Search, Filter, Package } from \"lucide-react\";\nimport type { Category, Product } from \"@shared/schema\";\n\nexport default function Products() {\n  const [, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<number | undefined>();\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Build query string for products\n  const buildProductsUrl = () => {\n    const params = new URLSearchParams();\n    if (searchQuery) params.append('search', searchQuery);\n    if (selectedCategory) params.append('categoryId', selectedCategory.toString());\n    return `/api/products${params.toString() ? '?' + params.toString() : ''}`;\n  };\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [buildProductsUrl()],\n  });\n\n  const sortedProducts = [...products].sort((a: Product, b: Product) => {\n    switch (sortBy) {\n      case \"price-low\":\n        return parseFloat(a.price || '0') - parseFloat(b.price || '0');\n      case \"price-high\":\n        return parseFloat(b.price || '0') - parseFloat(a.price || '0');\n      case \"rating\":\n        return parseFloat(b.rating?.toString() || '0') - parseFloat(a.rating?.toString() || '0');\n      case \"newest\":\n      default:\n        const aDate = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const bDate = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return bDate - aDate;\n    }\n  });\n\n  const handleCategorySelect = (categoryId: number) => {\n    setSelectedCategory(categoryId === selectedCategory ? undefined : categoryId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-warm\">\n      <Navigation />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Fresh Produce</h1>\n          <p className=\"text-gray-600\">\n            Discover fresh, local produce from verified farmers across Kenya\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6 mb-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search for products, farmers, or locations...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"product-search-input\"\n                />\n              </div>\n            </div>\n\n            {/* Sort */}\n            <div className=\"lg:w-48\">\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"sort-select\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Filter Toggle for Mobile */}\n            <Button variant=\"outline\" className=\"lg:hidden\" data-testid=\"filter-toggle\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filters\n            </Button>\n          </div>\n        </div>\n\n        {/* Categories */}\n        <CategoryFilter \n          categories={categories as any} \n          selectedCategory={selectedCategory}\n          onCategorySelect={handleCategorySelect}\n        />\n\n        {/* Products Grid */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {selectedCategory \n                  ? `${categories.find((c: any) => c.id === selectedCategory)?.name} Products`\n                  : \"All Products\"\n                }\n              </h2>\n              <p className=\"text-sm text-gray-600\">\n                {sortedProducts.length} product{sortedProducts.length !== 1 ? 's' : ''} found\n              </p>\n            </div>\n\n            {selectedCategory && (\n              <Button \n                variant=\"ghost\" \n                onClick={() => setSelectedCategory(undefined)}\n                data-testid=\"clear-category-filter\"\n              >\n                Clear Filter\n              </Button>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {Array.from({ length: 8 }, (_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n                  <CardContent className=\"p-4\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : sortedProducts.length > 0 ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {sortedProducts.map((product: Product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products found</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {searchQuery || selectedCategory \n                    ? \"Try adjusting your search or filters to find what you're looking for.\"\n                    : \"No products are currently available. Check back soon!\"\n                  }\n                </p>\n                {(searchQuery || selectedCategory) && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setSearchQuery(\"\");\n                      setSelectedCategory(undefined);\n                    }}\n                    data-testid=\"clear-all-filters\"\n                  >\n                    Clear All Filters\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Load More */}\n        {sortedProducts.length > 0 && sortedProducts.length % 12 === 0 && (\n          <div className=\"text-center\">\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"load-more-button\">\n              Load More Products\n            </Button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":7926},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/category-filter.tsx":{"content":"import { Button } from \"./button\";\n\ninterface Category {\n  id: number;\n  name: string;\n  description?: string;\n  icon?: string;\n}\n\ninterface CategoryFilterProps {\n  categories: Category[];\n  selectedCategory?: number;\n  onCategorySelect?: (categoryId: number) => void;\n  showAll?: boolean;\n}\n\nconst categoryIcons: { [key: string]: string } = {\n  'fruits': '🍎',\n  'vegetables': '🥕',\n  'grains': '🌾',\n  'dairy': '🧀',\n  'herbs': '🌿',\n  'livestock': '🥚',\n  'nuts': '🥜',\n  'spices': '🌶️',\n};\n\nexport default function CategoryFilter({ \n  categories, \n  selectedCategory, \n  onCategorySelect,\n  showAll = true \n}: CategoryFilterProps) {\n  \n  const getIcon = (categoryName: string) => {\n    const key = categoryName.toLowerCase();\n    return categoryIcons[key] || '📦';\n  };\n\n  const getColorClass = (categoryName: string) => {\n    const key = categoryName.toLowerCase();\n    switch(key) {\n      case 'fruits':\n        return 'bg-yellow-100 hover:bg-yellow-200 text-yellow-800';\n      case 'vegetables':\n        return 'bg-green-100 hover:bg-green-200 text-green-800';\n      case 'grains':\n        return 'bg-amber-100 hover:bg-amber-200 text-amber-800';\n      case 'dairy':\n        return 'bg-blue-100 hover:bg-blue-200 text-blue-800';\n      case 'herbs':\n        return 'bg-green-100 hover:bg-green-200 text-green-800';\n      case 'livestock':\n        return 'bg-orange-100 hover:bg-orange-200 text-orange-800';\n      default:\n        return 'bg-gray-100 hover:bg-gray-200 text-gray-800';\n    }\n  };\n\n  if (categories.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"bg-white py-8 border-b border-gray-100 mb-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-semibold text-gray-900\">Shop by Category</h3>\n          {showAll && (\n            <Button variant=\"ghost\" data-testid=\"view-all-categories\">\n              View All <span className=\"ml-1\">→</span>\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4\">\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => onCategorySelect?.(category.id)}\n              className={`text-center group cursor-pointer p-4 rounded-lg transition-colors ${\n                selectedCategory === category.id \n                  ? 'bg-primary text-white' \n                  : getColorClass(category.name)\n              }`}\n              data-testid={`category-${category.name.toLowerCase()}`}\n            >\n              <div className={`rounded-full w-16 h-16 mx-auto mb-3 flex items-center justify-center transition-colors ${\n                selectedCategory === category.id \n                  ? 'bg-white bg-opacity-20' \n                  : 'bg-white bg-opacity-50'\n              }`}>\n                <span className=\"text-2xl\">{getIcon(category.name)}</span>\n              </div>\n              <p className=\"text-sm font-medium\">{category.name}</p>\n              <p className={`text-xs mt-1 ${\n                selectedCategory === category.id \n                  ? 'text-white text-opacity-80' \n                  : 'text-gray-500'\n              }`}>\n                Available now\n              </p>\n            </button>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3439},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/farmer-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"./card\";\nimport { Badge } from \"./badge\";\nimport { Button } from \"./button\";\nimport { Star, MapPin, Calendar } from \"lucide-react\";\n\ninterface FarmerCardProps {\n  farmer: any;\n  showProducts?: boolean;\n}\n\nexport default function FarmerCard({ farmer, showProducts = true }: FarmerCardProps) {\n  const rating = parseFloat(farmer.rating || \"0\");\n  const experienceYears = farmer.experience || 0;\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\" data-testid={`farmer-card-${farmer.id}`}>\n      <div className=\"relative\">\n        <div className=\"h-48 bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 rounded-full bg-primary text-white flex items-center justify-center text-2xl font-bold mb-2 mx-auto\">\n              {farmer.farmName ? farmer.farmName.charAt(0).toUpperCase() : 'F'}\n            </div>\n            <h3 className=\"font-semibold text-gray-900\">{farmer.farmName}</h3>\n          </div>\n        </div>\n        \n        {/* Status Badges */}\n        <div className=\"absolute top-3 left-3 flex flex-wrap gap-1\">\n          {farmer.verified && (\n            <Badge className=\"bg-green-600 text-white\">\n              Verified\n            </Badge>\n          )}\n          \n          {experienceYears >= 10 && (\n            <Badge className=\"bg-primary text-white\">\n              Expert\n            </Badge>\n          )}\n          \n          {farmer.specializations && farmer.specializations.includes('organic') && (\n            <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n              Organic\n            </Badge>\n          )}\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        {/* Farmer Info */}\n        <div className=\"flex items-center mb-4\">\n          <div className=\"w-12 h-12 rounded-full bg-gray-300 mr-3\"></div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-semibold text-gray-900\" data-testid={`farmer-name-${farmer.id}`}>\n              Owner Name\n            </h4>\n            <div className=\"flex items-center text-sm text-gray-500\">\n              <MapPin className=\"h-3 w-3 mr-1\" />\n              {farmer.county}{farmer.subCounty ? `, ${farmer.subCounty}` : ''}\n            </div>\n          </div>\n        </div>\n        \n        {/* Description */}\n        <p className=\"text-gray-600 mb-4 text-sm line-clamp-3\">\n          {farmer.description || \"Dedicated to providing fresh, quality produce.\"}\n        </p>\n        \n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-4 mb-4 text-center\">\n          <div>\n            <div className=\"flex items-center justify-center mb-1\">\n              <Calendar className=\"h-4 w-4 text-gray-400 mr-1\" />\n              <span className=\"text-sm font-medium\">{experienceYears}+ years</span>\n            </div>\n            <p className=\"text-xs text-gray-500\">Experience</p>\n          </div>\n          \n          <div>\n            <div className=\"flex items-center justify-center mb-1\">\n              <div className=\"flex text-yellow-400\">\n                {Array.from({ length: 5 }, (_, i) => (\n                  <Star \n                    key={i} \n                    className={`h-3 w-3 ${i < Math.floor(rating) ? 'fill-current' : ''}`} \n                  />\n                ))}\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {rating.toFixed(1)} ({farmer.totalReviews || 0} reviews)\n            </p>\n          </div>\n        </div>\n        \n        {/* Specializations */}\n        {farmer.specializations && farmer.specializations.length > 0 && (\n          <div className=\"mb-4\">\n            <p className=\"text-sm font-medium text-gray-700 mb-2\">Specializations</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {farmer.specializations.slice(0, 3).map((spec: string, index: number) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {spec}\n                </Badge>\n              ))}\n              {farmer.specializations.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{farmer.specializations.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Actions */}\n        <div className=\"flex gap-2\">\n          <Link href={`/farmers/${farmer.id}`} className=\"flex-1\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              View Profile\n            </Button>\n          </Link>\n          \n          {showProducts && (\n            <Link href={`/products?farmerId=${farmer.id}`} className=\"flex-1\">\n              <Button size=\"sm\" className=\"w-full\">\n                View Products\n              </Button>\n            </Link>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5016},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"./button\";\nimport { Input } from \"./input\";\nimport { Badge } from \"./badge\";\nimport { Sheet, SheetContent, SheetTrigger } from \"./sheet\";\nimport { \n  Sprout, \n  Search, \n  ShoppingCart, \n  Menu, \n  User, \n  Package, \n  BarChart3,\n  LogOut,\n  Settings\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"./dropdown-menu\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const { data: cartItems = [] } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n  });\n\n  const cartItemCount = cartItems.reduce((total: number, item: any) => total + item.quantity, 0);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      window.location.href = `/products?search=${encodeURIComponent(searchQuery.trim())}`;\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const navigationItems = [\n    { href: \"/\", label: \"Home\", show: true },\n    { href: \"/products\", label: \"Products\", show: true },\n    { href: \"/farmer-dashboard\", label: \"Dashboard\", show: user?.role === 'farmer' },\n    { href: \"/admin-dashboard\", label: \"Admin\", show: user?.role === 'admin' },\n  ];\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"logo-link\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Sprout className=\"text-white h-6 w-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Kenya Harvest Hub</h1>\n              <p className=\"text-xs text-gray-500 hidden sm:block\">Farm to Table</p>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {navigationItems.map((item) => \n              item.show && (\n                <Link \n                  key={item.href}\n                  href={item.href}\n                  className={`text-gray-700 hover:text-primary transition-colors ${\n                    location === item.href ? 'text-primary font-medium' : ''\n                  }`}\n                  data-testid={`nav-${item.label.toLowerCase()}`}\n                >\n                  {item.label}\n                </Link>\n              )\n            )}\n          </nav>\n\n          {/* Search Bar */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n            <form onSubmit={handleSearch} className=\"relative w-full\">\n              <Input \n                type=\"text\" \n                placeholder=\"Search fresh produce...\" \n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-input\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            </form>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Mobile Search */}\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n              <Search className=\"h-5 w-5\" />\n            </Button>\n\n            {/* Shopping Cart */}\n            {isAuthenticated && (\n              <Link href=\"/cart\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"cart-button\">\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  {cartItemCount > 0 && (\n                    <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs bg-secondary\">\n                      {cartItemCount}\n                    </Badge>\n                  )}\n                </Button>\n              </Link>\n            )}\n\n            {/* User Menu */}\n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"user-menu\">\n                    {user?.profileImageUrl ? (\n                      <img \n                        src={user.profileImageUrl} \n                        alt=\"Profile\" \n                        className=\"h-8 w-8 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <User className=\"h-5 w-5\" />\n                    )}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium\">\n                        {user?.firstName && user?.lastName \n                          ? `${user.firstName} ${user.lastName}`\n                          : user?.email\n                        }\n                      </p>\n                      <p className=\"text-xs text-gray-500 capitalize\">{user?.role}</p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  \n                  {user?.role === 'farmer' && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/farmer-dashboard\" className=\"flex items-center\">\n                        <Package className=\"h-4 w-4 mr-2\" />\n                        Farmer Dashboard\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  \n                  {user?.role === 'admin' && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin-dashboard\" className=\"flex items-center\">\n                        <BarChart3 className=\"h-4 w-4 mr-2\" />\n                        Admin Panel\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  \n                  <DropdownMenuItem>\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  \n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"logout-button\">\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Log out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden sm:flex items-center space-x-2\">\n                <Button variant=\"outline\" onClick={() => window.location.href = '/api/login'} data-testid=\"signin-button\">\n                  Sign In\n                </Button>\n                <Button onClick={() => window.location.href = '/api/login'} data-testid=\"join-farmer-button\">\n                  Join as Farmer\n                </Button>\n              </div>\n            )}\n\n            {/* Mobile Menu */}\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"lg:hidden\" data-testid=\"mobile-menu-button\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-64\">\n                <div className=\"flex flex-col h-full\">\n                  <div className=\"flex items-center space-x-2 mb-6\">\n                    <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                      <Sprout className=\"text-white h-5 w-5\" />\n                    </div>\n                    <span className=\"font-bold text-gray-900\">Kenya Harvest Hub</span>\n                  </div>\n                  \n                  <nav className=\"flex-1\">\n                    <ul className=\"space-y-3\">\n                      {navigationItems.map((item) => \n                        item.show && (\n                          <li key={item.href}>\n                            <Link \n                              href={item.href}\n                              className={`block py-2 text-gray-700 hover:text-primary transition-colors ${\n                                location === item.href ? 'text-primary font-medium' : ''\n                              }`}\n                              onClick={() => setMobileMenuOpen(false)}\n                            >\n                              {item.label}\n                            </Link>\n                          </li>\n                        )\n                      )}\n                    </ul>\n                  </nav>\n                  \n                  {!isAuthenticated && (\n                    <div className=\"border-t pt-3 space-y-3\">\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\" \n                        onClick={() => window.location.href = '/api/login'}\n                      >\n                        Sign In\n                      </Button>\n                      <Button \n                        className=\"w-full\" \n                        onClick={() => window.location.href = '/api/login'}\n                      >\n                        Join as Farmer\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Search Bar */}\n      <div className=\"md:hidden px-4 pb-3\">\n        <form onSubmit={handleSearch} className=\"relative\">\n          <Input \n            type=\"text\" \n            placeholder=\"Search fresh produce...\" \n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"mobile-search-input\"\n          />\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n        </form>\n      </div>\n    </header>\n  );\n}\n","size_bytes":10671},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"./button\";\nimport { Card, CardContent } from \"./card\";\nimport { Badge } from \"./badge\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  ShoppingCart, \n  Heart, \n  Star, \n  MapPin, \n  Leaf\n} from \"lucide-react\";\n\ninterface ProductCardProps {\n  product: any;\n  showFarmerInfo?: boolean;\n}\n\nexport default function ProductCard({ product, showFarmerInfo = true }: ProductCardProps) {\n  const { toast } = useToast();\n  const [isWishlisted, setIsWishlisted] = useState(false);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/cart\", {\n        productId: product.id,\n        quantity: 1,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Added to cart\",\n        description: `${product.name} added to your cart.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to add items to cart.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    addToCartMutation.mutate();\n  };\n\n  const handleWishlistToggle = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsWishlisted(!isWishlisted);\n    // TODO: Implement wishlist API\n  };\n\n  const productImage = product.images && product.images.length > 0 \n    ? product.images[0] \n    : \"https://images.unsplash.com/photo-1592924357228-91a4daadcfea?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\";\n\n  const rating = parseFloat(product.rating || \"0\");\n\n  return (\n    <Card className=\"overflow-hidden group cursor-pointer hover:shadow-lg transition-shadow\" data-testid={`product-card-${product.id}`}>\n      <Link href={`/products/${product.id}`}>\n        <div className=\"relative\">\n          <img \n            src={productImage}\n            alt={product.name}\n            className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n          />\n          \n          {/* Badges */}\n          <div className=\"absolute top-3 left-3 flex flex-wrap gap-1\">\n            {product.isOrganic && (\n              <Badge className=\"bg-green-600 text-white\">\n                <Leaf className=\"h-3 w-3 mr-1\" />\n                Organic\n              </Badge>\n            )}\n            \n            {product.stock > 0 && product.stock <= 10 && (\n              <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">\n                Low Stock\n              </Badge>\n            )}\n            \n            {new Date(product.createdAt) > new Date(Date.now() - 24 * 60 * 60 * 1000) && (\n              <Badge className=\"bg-primary text-white\">\n                Fresh Today\n              </Badge>\n            )}\n          </div>\n          \n          {/* Wishlist Button */}\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"absolute top-3 right-3 bg-white bg-opacity-90 hover:bg-opacity-100\"\n            onClick={handleWishlistToggle}\n            data-testid={`wishlist-${product.id}`}\n          >\n            <Heart className={`h-4 w-4 ${isWishlisted ? 'fill-red-500 text-red-500' : 'text-gray-600'}`} />\n          </Button>\n          \n          {/* Out of Stock Overlay */}\n          {product.stock <= 0 && (\n            <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n              <Badge variant=\"destructive\" className=\"text-sm\">\n                Out of Stock\n              </Badge>\n            </div>\n          )}\n        </div>\n      </Link>\n      \n      <CardContent className=\"p-4\">\n        <Link href={`/products/${product.id}`}>\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-gray-900 truncate\" data-testid={`product-name-${product.id}`}>\n                {product.name}\n              </h4>\n              <p className=\"text-sm text-gray-500\">Per {product.unit}</p>\n            </div>\n            <div className=\"text-right ml-2\">\n              <p className=\"text-lg font-bold text-primary\" data-testid={`product-price-${product.id}`}>\n                KSh {parseFloat(product.price).toFixed(0)}\n              </p>\n            </div>\n          </div>\n        </Link>\n        \n        {/* Farmer Info */}\n        {showFarmerInfo && (\n          <div className=\"flex items-center mb-3\">\n            <div className=\"w-6 h-6 rounded-full bg-gray-300 mr-2\"></div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-gray-700 truncate\">\n                Farmer Info\n              </p>\n              <div className=\"flex items-center text-xs text-gray-500\">\n                <MapPin className=\"h-3 w-3 mr-1\" />\n                <span className=\"truncate\">Location</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Rating and Stock */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <div className=\"flex text-yellow-400 text-sm\">\n              {Array.from({ length: 5 }, (_, i) => (\n                <Star \n                  key={i} \n                  className={`h-3 w-3 ${i < Math.floor(rating) ? 'fill-current' : ''}`} \n                />\n              ))}\n            </div>\n            <span className=\"text-sm text-gray-600 ml-2\">\n              {rating.toFixed(1)} ({product.totalReviews || 0})\n            </span>\n          </div>\n          <span className=\"text-xs text-gray-500\">\n            {product.stock} {product.unit} left\n          </span>\n        </div>\n\n        {/* Add to Cart Button */}\n        <Button \n          className=\"w-full\"\n          onClick={handleAddToCart}\n          disabled={addToCartMutation.isPending || product.stock <= 0}\n          data-testid={`add-to-cart-${product.id}`}\n        >\n          <ShoppingCart className=\"h-4 w-4 mr-2\" />\n          {addToCartMutation.isPending \n            ? \"Adding...\" \n            : product.stock <= 0 \n              ? \"Out of Stock\" \n              : \"Add to Cart\"\n          }\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6876},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}